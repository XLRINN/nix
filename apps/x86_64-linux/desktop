#!/usr/bin/env bash
set -eu

# Default branch/ref selectors so this installer matches server/install
export NIX_REF=${NIX_REF:-testing}
export NIX_BRANCH=${NIX_BRANCH:-testing}

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

#commit

check_installer() {
  if [ -e /etc/NIXOS ]; then
    echo -e "\e[1;32mRunning in the NixOS installer environment.\e[0m"
  else
    echo -e "\e[1;31mNot running in the NixOS installer environment.\e[0m"
    exit 1
  fi
}

prompt_bws_token() {
  if [[ -n "${BWS_ACCESS_TOKEN:-}" ]]; then
    echo -e "\e[1;36mUsing provided Bitwarden machine token from environment.\e[0m"
    printf "%s" "$BWS_ACCESS_TOKEN" > /tmp/bws_access_token
    return
  fi
  echo -ne "\e[1;33mEnter Bitwarden Machine Token (BWS_ACCESS_TOKEN), or leave blank to skip: \e[0m"
  stty -echo
  read -r token || true
  stty echo
  echo
  if [[ -n "$token" ]]; then
    export BWS_ACCESS_TOKEN="$token"
    printf "%s" "$token" > /tmp/bws_access_token
    echo -e "\e[1;36mBitwarden token captured for pre-boot secrets.\e[0m"
  else
    echo -e "\e[1;36mSkipping Bitwarden token; you can run 'nix run .#secrets' after first boot.\e[0m"
  fi
}

cleanup() {
  rm -rf nixos-config-main.zip nixos-config-main nixos-config nix-* nyx-*
  rm -f /tmp/bws_access_token /tmp/bws_token_passphrase
}

download_config() {
  # Allow pinning a branch, tag, or commit SHA via NIX_REF
  NIX_REF=${NIX_REF:-testing}
  curl -LJ0 "https://github.com/xlrinn/nix/archive/${NIX_REF}.zip" -o nixos-config-main.zip
  unzip -q nixos-config-main.zip
  # Find extracted directory (nix-<refOrSha>) and enter
  SRC_DIR=$(find . -maxdepth 1 -type d -name "nix-*" | head -n1)
  if [ -z "$SRC_DIR" ] || [ ! -d "$SRC_DIR" ]; then
    echo -e "${RED}Error: Extracted directory not found after download.${NC}"
    exit 1
  fi
  cd "$SRC_DIR"
  echo -e "${GREEN}✓ Configuration downloaded and extracted${NC}"
}

run_apply() {
  prompt_bws_token
  # Interactive by default; set NONINTERACTIVE=1 externally only if desired.
  : "${HOST_NAME:=}"  # allow pre-seeding
  : "${BOOT_DISK:=}"
  ./apps/x86_64-linux/apply
  export USERNAME="david"
  echo -e "${GREEN}✓ Configuration complete${NC}"
}

run_disko() {
  nix --experimental-features "nix-command flakes" run github:nix-community/disko -- --mode disko ./modules/nixos/disk-config.nix
  echo -e "${GREEN}✓ Disk formatted and mounted${NC}"
}

setup_files() {
  if [[ -z "${BWS_ACCESS_TOKEN:-}" && -f /tmp/bws_access_token ]]; then
    BWS_ACCESS_TOKEN="$(cat /tmp/bws_access_token)"
    export BWS_ACCESS_TOKEN
  fi
  if [[ -z "${BWS_TOKEN_PASSPHRASE:-}" && -f /tmp/bws_token_passphrase ]]; then
    BWS_TOKEN_PASSPHRASE="$(cat /tmp/bws_token_passphrase)"
    export BWS_TOKEN_PASSPHRASE
  fi

  mkdir -p /mnt/etc/nixos
  cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
  echo -e "${GREEN}✓ Files copied to system${NC}"

  # Ensure a clean ~/nix git clone for the first boot
  mkdir -p /mnt/home/david
  # Ensure SSH directory exists for potential secret deployment
  mkdir -p /mnt/home/david/.ssh
  chmod 700 /mnt/home/david/.ssh
  if [ -d "/mnt/home/david/nix" ]; then
    rm -rf /mnt/home/david/nix
  fi
  # Clone the chosen branch into the user's home for post-install updates
  git clone --origin nyx --depth 1 --branch "${NIX_BRANCH}" https://github.com/xlrinn/nix.git /mnt/home/david/nix || {
    echo -e "${YELLOW}Branch ${NIX_BRANCH} not available; falling back to 'master'${NC}"
    git clone --origin nyx --depth 1 --branch master https://github.com/xlrinn/nix.git /mnt/home/david/nix
  }
  # Minimal identity passthrough (optional)
  if [ -f /tmp/git_name.txt ]; then git -C /mnt/home/david/nix config user.name "$(cat /tmp/git_name.txt)"; fi
  if [ -f /tmp/git_email.txt ]; then git -C /mnt/home/david/nix config user.email "$(cat /tmp/git_email.txt)"; fi
  # Enforce HTTPS-only origin
  # Ensure 'nyx' remote uses HTTPS and fetches all branches
  git -C /mnt/home/david/nix remote set-url nyx https://github.com/xlrinn/nix.git >/dev/null 2>&1 || true
  git -C /mnt/home/david/nix config --add remote.nyx.fetch "+refs/heads/*:refs/remotes/nyx/*" || true
  git -C /mnt/home/david/nix remote set-branches nyx '*' || true
  git -C /mnt/home/david/nix fetch nyx --prune --tags || true
  git -C /mnt/home/david/nix fetch nyx --unshallow >/dev/null 2>&1 || true
  chown -R 1000:1000 /mnt/home/david/nix
  chmod -R 755 /mnt/home/david/nix

  # Optionally pre-provision Bitwarden Secrets Manager token for first boot
  if [[ -n "${BWS_ACCESS_TOKEN:-}" ]]; then
    echo -e "${CYAN}Provisioning BWS token for first boot...${NC}"
    # Prefer encrypted token in repo using age via nix shell; fallback to private env file
    if [[ -n "${BWS_TOKEN_PASSPHRASE:-}" ]]; then
      chroot /mnt /bin/sh -lc "cd /home/david/nix && nix shell nixpkgs#age -c BWS_ACCESS_TOKEN='${BWS_ACCESS_TOKEN}' BWS_TOKEN_PASSPHRASE='${BWS_TOKEN_PASSPHRASE}' bash scripts/prepare-bws-token.sh" || {
        echo -e "${YELLOW}Failed to create encrypted token; falling back to ~/.secrets/bws.env${NC}"
        mkdir -p /mnt/home/david/.secrets
        printf "export BWS_ACCESS_TOKEN='%s'\n" "${BWS_ACCESS_TOKEN}" > /mnt/home/david/.secrets/bws.env
        chmod 600 /mnt/home/david/.secrets/bws.env
      }
    else
      mkdir -p /mnt/home/david/.secrets
      printf "export BWS_ACCESS_TOKEN='%s'\n" "${BWS_ACCESS_TOKEN}" > /mnt/home/david/.secrets/bws.env
      chmod 600 /mnt/home/david/.secrets/bws.env
    fi
  fi

  rm -f /tmp/bws_access_token /tmp/bws_token_passphrase
}

install_nixos() {
  ARCH=$(uname -m)

  case "$ARCH" in
    x86_64)
      BASE_TARGET="x86_64-linux"
      ;;
    aarch64)
      BASE_TARGET="aarch64-linux"
      ;;
    *)
      echo -e "${RED}Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  if [[ "${NIX_PROFILE:-}" == "server" ]]; then
    FLAKE_TARGET="server-${BASE_TARGET}"
  else
    FLAKE_TARGET="${BASE_TARGET}"
  fi

  nixos-install --flake .#$FLAKE_TARGET --option max-jobs 1 --no-write-lock-file --no-root-passwd
  chmod -R 775 /mnt/etc/nixos
  
  # Set root and user passwords non-interactively
  echo "root:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  echo "david:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  
  echo -e "${GREEN}✓ NixOS installed successfully${NC}"
}

run_secrets_preboot() {
  # If we provisioned a token, attempt to run the secrets wizard inside the target before reboot
  echo -e "${CYAN}Attempting to run secrets wizard before reboot...${NC}"
  # If a passphrase was provided, stash it in the target user's secrets dir to avoid quoting issues
  if [[ -n "${BWS_TOKEN_PASSPHRASE:-}" ]]; then
    mkdir -p /mnt/home/david/.secrets
    printf "%s" "${BWS_TOKEN_PASSPHRASE}" > /mnt/home/david/.secrets/bws.pass
    chmod 600 /mnt/home/david/.secrets/bws.pass
  fi
  # Pass BWS token (if provided) and run with jq available
  CHROOT_ENV_PREFIX=""
  if [[ -n "${BWS_ACCESS_TOKEN:-}" ]]; then
    CHROOT_ENV_PREFIX="BWS_ACCESS_TOKEN=\"${BWS_ACCESS_TOKEN}\" "
  elif [[ -f /tmp/bws_access_token ]]; then
    CHROOT_ENV_PREFIX="BWS_ACCESS_TOKEN=\"$(cat /tmp/bws_access_token)\" "
  fi
  # Run as the target user in chroot; use passphrase file if present
  chroot /mnt /bin/sh -lc "su - david -c '${CHROOT_ENV_PREFIX} if [ -f ~/.secrets/bws.pass ]; then export BWS_TOKEN_PASSPHRASE=\"$(cat ~/.secrets/bws.pass)\"; fi; cd /home/david/nix && nix shell nixpkgs#jq -c bash scripts/secrets-wizard.sh'" || {
    echo -e "${YELLOW}Secrets wizard pre-boot run failed; you can run \"nix run .#secrets\" after first login.${NC}"
  }

  # After syncing secrets (via rbw/sopswarden), attempt an impure rebuild to materialize secret files
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64)
      BASE_TARGET="x86_64-linux"
      ;;
    aarch64)
      BASE_TARGET="aarch64-linux"
      ;;
    *)
      BASE_TARGET="x86_64-linux"
      ;;
  esac
  if [[ "${NIX_PROFILE:-}" == "server" ]]; then
    FLAKE_TARGET="server-${BASE_TARGET}"
  else
    FLAKE_TARGET="${BASE_TARGET}"
  fi
  chroot /mnt /nix/var/nix/profiles/system/sw/bin/bash -lc "nixos-rebuild switch --impure --flake '/etc/nixos#$FLAKE_TARGET' --no-write-lock-file" || true
}

prompt_reboot() {
  echo -e "\e[1;32mRebooting in 5 seconds...\e[0m"
  sleep 5
  reboot
}

cleanup
check_installer
download_config
run_apply
run_disko
setup_files
install_nixos
cleanup
run_secrets_preboot
prompt_reboot 
