#!/usr/bin/env bash
set -exu

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)
REPO_ROOT=$(cd "$SCRIPT_DIR/../.." && pwd -P)
LOCAL_SRC_DIR=""

cd /tmp || { echo -e "${RED}Cannot cd to /tmp${NC}"; exit 1; }

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

progress() {
  echo -e "\e[1;36m$1\e[0m"
}

check_installer() {
  if [ -e /etc/NIXOS ]; then
    progress "‚úì Running in the NixOS installer environment."
  else
    echo -e "${RED}Not running in the NixOS installer environment.${NC}"
    exit 1
  fi
}

prompt_bws_token() {
  if [[ -n "${BWS_ACCESS_TOKEN:-}" ]]; then
    progress "üîê Using provided Bitwarden machine token from environment."
    printf "%s" "$BWS_ACCESS_TOKEN" > /tmp/bws_access_token
    return
  fi
  echo -ne "\e[1;33mEnter Bitwarden Machine Token (BWS_ACCESS_TOKEN), or leave blank to skip: \e[0m"
  stty -echo
  read -r token || true
  stty echo
  echo
  if [[ -n "$token" ]]; then
    export BWS_ACCESS_TOKEN="$token"
    printf "%s" "$token" > /tmp/bws_access_token
    progress "üîê Bitwarden token captured for pre-boot secrets."
  else
    progress "‚ÑπÔ∏è Skipping Bitwarden token; you can run 'nix run .#secrets' after first boot."
  fi
}

cleanup() {
  progress "üßπ Cleaning up temporary files..."
  rm -rf nixos-config-main.zip nix-* nyx-*
  if [[ -n "$LOCAL_SRC_DIR" && -d "$LOCAL_SRC_DIR" ]]; then
    rm -rf "$LOCAL_SRC_DIR"
  fi
}

download_config() {
  NIX_REF=${NIX_REF:-testing}
  if [[ "$NIX_REF" == "local" ]]; then
    progress "üì¶ Using local repository at $REPO_ROOT"
    LOCAL_SRC_DIR=$(mktemp -d /tmp/nix-local-XXXXXX)
    cp -a "$REPO_ROOT"/. "$LOCAL_SRC_DIR"/
    rm -rf "$LOCAL_SRC_DIR/.git"
    SRC_DIR="$LOCAL_SRC_DIR"
  else
    progress "üì¶ Downloading configuration from $NIX_REF..."
    curl -LJ0 "https://github.com/xlrinn/nix/archive/${NIX_REF}.zip" -o nixos-config-main.zip
    unzip -q nixos-config-main.zip

    # Find the extracted directory (GitHub uses nix-<refOrSha>)
    SRC_DIR=$(find . -maxdepth 1 -type d -name "nix-*" | head -n1)
    if [ -z "$SRC_DIR" ] || [ ! -d "$SRC_DIR" ]; then
      echo -e "${RED}Error: Extracted directory not found after download.${NC}"
      exit 1
    fi
  fi
}

run_apply() {
  progress "‚öôÔ∏è  Applying configuration (interactive)..."
  chmod +x "${SRC_DIR}/apps/x86_64-linux/apply"
  : "${HOST_NAME:=}"  # allow pre-seeding externally
  : "${BOOT_DISK:=}"
  "${SRC_DIR}/apps/x86_64-linux/apply"
  if [ ! -f /tmp/username.txt ]; then
    echo -e "${RED}Error: /tmp/username.txt does not exist.${NC}"
    exit 1
  fi
}

run_disko() {
  progress "üíæ Partitioning disk..."
  nix run --extra-experimental-features "nix-command flakes" \
  github:nix-community/disko -- --mode zap_create_mount "${SRC_DIR}/modules/nixos/disk-config.nix"
}

verify_disko() {
  progress "üîç Verifying disk layout..."

  local expected=(
    "/dev/disk/by-label/NIXOS_BOOT"
    "/dev/disk/by-label/NIXOS_ROOT"
  )

  local missing=0
  for path in "${expected[@]}"; do
    if [[ ! -e "$path" ]]; then
      echo -e "${RED}Expected block device $path not found after disko run.${NC}"
      missing=1
    fi
  done

  if (( missing )); then
    echo -e "${YELLOW}lsblk output for debugging:${NC}"
    lsblk -f
    exit 1
  fi

  if ! findmnt -rn /mnt >/dev/null 2>&1; then
    echo -e "${RED}/mnt is not mounted after partitioning.${NC}"
    findmnt -arn
    exit 1
  fi

  if ! findmnt -rn /mnt/boot >/dev/null 2>&1; then
    echo -e "${RED}/mnt/boot is not mounted after partitioning.${NC}"
    findmnt -arn
    exit 1
  fi
}

setup_files() {
  progress "üìÅ Setting up files..."
  
  progress "Copying configuration to /mnt/etc/nixos"
  mkdir -p /mnt/etc/nixos
  cp -r "${SRC_DIR}"/* /mnt/etc/nixos/
  
  progress "Setting up user nix configuration in ~/nix"
  mkdir -p /mnt/home/david
  # Ensure SSH directory exists for potential secret deployment
  mkdir -p /mnt/home/david/.ssh
  chmod 700 /mnt/home/david/.ssh
  
  # Remove any existing nix directory to ensure clean clone
  if [ -d "/mnt/home/david/nix" ]; then
      rm -rf /mnt/home/david/nix
  fi
  
  # Clone the repository to ~/nix with desired branch (default: testing, fallback: master)
  BRANCH="${NIX_BRANCH:-testing}"
  REMOTE_HTTPS="https://github.com/xlrinn/nix.git"
  if git ls-remote --heads "$REMOTE_HTTPS" "$BRANCH" >/dev/null 2>&1; then
    progress "üì• Cloning branch $BRANCH..."
  else
    progress "‚ÑπÔ∏è Branch $BRANCH not found; falling back to master"
    BRANCH="master"
  fi
  git clone --origin nyx --depth 1 --branch "$BRANCH" "$REMOTE_HTTPS" /mnt/home/david/nix

  # Configure git remotes and identity
  if [ -f /tmp/git_name.txt ]; then GIT_NAME=$(cat /tmp/git_name.txt); fi
  if [ -f /tmp/git_email.txt ]; then GIT_EMAIL=$(cat /tmp/git_email.txt); fi
  if [ -n "${GIT_NAME:-}" ]; then
    git -C /mnt/home/david/nix config user.name "$GIT_NAME"
  fi
  if [ -n "${GIT_EMAIL:-}" ]; then
    git -C /mnt/home/david/nix config user.email "$GIT_EMAIL"
  fi
    # Force HTTPS-only remote (named 'nyx') for reliability in live envs
  HARD_REMOTE_HTTPS="https://github.com/xlrinn/nix.git"
    progress "üîó Ensuring 'nyx' remote (HTTPS): $HARD_REMOTE_HTTPS"
    git -C /mnt/home/david/nix remote set-url nyx "$HARD_REMOTE_HTTPS" >/dev/null 2>&1 || true
  # Ensure all branches are fetched by default from 'nyx'
  git -C /mnt/home/david/nix config --add remote.nyx.fetch "+refs/heads/*:refs/remotes/nyx/*" || true
  git -C /mnt/home/david/nix remote set-branches nyx '*' || true
  git -C /mnt/home/david/nix fetch nyx --prune --tags || true
  git -C /mnt/home/david/nix fetch nyx --unshallow >/dev/null 2>&1 || true
  git -C /mnt/home/david/nix branch --set-upstream-to "nyx/$BRANCH" "$BRANCH" >/dev/null 2>&1 || true
  
  # Set proper ownership (1000:1000 is the default UID:GID for first user)
  chown -R 1000:1000 /mnt/home/david/nix
  
  # Ensure the directory is accessible
  chmod -R 755 /mnt/home/david/nix
  
  progress "‚úì Repository cloned to /mnt/home/david/nix"
}

install_nixos() {
  progress "üöÄ Installing NixOS..."
  
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64) FLAKE_TARGET="x86_64-linux" ;;
    aarch64) FLAKE_TARGET="aarch64-linux" ;;
    *)
      echo -e "${RED}Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  progress "Installing NixOS from /mnt/etc/nixos"
  nixos-install --no-root-passwd --flake "/mnt/etc/nixos#$FLAKE_TARGET" --no-write-lock-file
  
  chmod -R 775 /mnt/etc/nixos
  
  progress "üîê Setting root and user passwords..."
  echo "root:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  echo "david:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  
  progress "üè† Applying home-manager configurations..."
  chroot /mnt /nix/var/nix/profiles/system/sw/bin/bash -c "nixos-rebuild switch --flake '/etc/nixos#$FLAKE_TARGET' --no-write-lock-file"
}

run_secrets_preboot() {
  progress "Attempting to run secrets wizard before reboot..."
  # If a passphrase was provided, stash it in the target user's secrets dir to avoid quoting issues
  if [[ -n "${BWS_TOKEN_PASSPHRASE:-}" ]]; then
    mkdir -p /mnt/home/david/.secrets
    printf "%s" "${BWS_TOKEN_PASSPHRASE}" > /mnt/home/david/.secrets/bws.pass
    chmod 600 /mnt/home/david/.secrets/bws.pass
  fi
  # Pass BWS token (if provided) and run with jq available
  CHROOT_ENV_PREFIX=""
  if [[ -n "${BWS_ACCESS_TOKEN:-}" ]]; then
    CHROOT_ENV_PREFIX="BWS_ACCESS_TOKEN=\"${BWS_ACCESS_TOKEN}\" "
  elif [[ -f /tmp/bws_access_token ]]; then
    CHROOT_ENV_PREFIX="BWS_ACCESS_TOKEN=\"$(cat /tmp/bws_access_token)\" "
  fi
  # Run as the target user in chroot; use passphrase file if present
  chroot /mnt /bin/sh -lc "su - david -c '${CHROOT_ENV_PREFIX} if [ -f ~/.secrets/bws.pass ]; then export BWS_TOKEN_PASSPHRASE=\"$(cat ~/.secrets/bws.pass)\"; fi; cd /home/david/nix && nix shell nixpkgs#jq -c bash scripts/secrets-wizard.sh'" || {
    echo -e "${YELLOW}Secrets wizard pre-boot run failed; you can run \"nix run .#secrets\" after first login.${NC}"
  }

  # After syncing secrets (via rbw/sopswarden), attempt an impure rebuild to materialize secret files
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64) FLAKE_TARGET="x86_64-linux" ;;
    aarch64) FLAKE_TARGET="aarch64-linux" ;;
    *) FLAKE_TARGET="x86_64-linux" ;;
  esac
  chroot /mnt /nix/var/nix/profiles/system/sw/bin/bash -lc "nixos-rebuild switch --impure --flake '/etc/nixos#$FLAKE_TARGET' --no-write-lock-file" || true
}

auto_reboot() {
  progress "‚úÖ Installation complete! Rebooting in 5 seconds..."
  sleep 5
  reboot
}

# --- Main execution flow ---
cleanup
check_installer
download_config
prompt_bws_token
run_apply
run_disko
verify_disko
setup_files
install_nixos
cleanup
run_secrets_preboot
auto_reboot 
