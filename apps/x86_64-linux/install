#!/usr/bin/env bash
set -exu

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

progress() {
  echo -e "\e[1;36m$1\e[0m"
}

check_installer() {
  if [ -e /etc/NIXOS ]; then
    progress "‚úì Running in the NixOS installer environment."
  else
    echo -e "${RED}Not running in the NixOS installer environment.${NC}"
    exit 1
  fi
}

cleanup() {
  progress "üßπ Cleaning up temporary files..."
  rm -rf nixos-config-main.zip nix-*
}

download_config() {
  progress "üì¶ Downloading configuration..."
  # Allow pinning a branch, tag, or commit SHA via NIX_REF; default to 'testing'
  NIX_REF=${NIX_REF:-testing}
  curl -LJ0 "https://github.com/xlrinn/nix/archive/${NIX_REF}.zip" -o nixos-config-main.zip
  unzip -q nixos-config-main.zip

  # Find the extracted directory (GitHub uses nix-<refOrSha>)
  SRC_DIR=$(find . -maxdepth 1 -type d -name "nix-*" | head -n1)
  if [ -z "$SRC_DIR" ] || [ ! -d "$SRC_DIR" ]; then
    echo -e "${RED}Error: Extracted directory not found after download.${NC}"
    exit 1
  fi
}

run_apply() {
  progress "‚öôÔ∏è  Applying configuration..."
  chmod +x "${SRC_DIR}/apps/x86_64-linux/apply"
  "${SRC_DIR}/apps/x86_64-linux/apply"

  if [ ! -f /tmp/username.txt ]; then
    echo -e "${RED}Error: /tmp/username.txt does not exist.${NC}"
    exit 1
  fi
}

run_disko() {
  progress "üíæ Partitioning disk..."
  nix run --extra-experimental-features "nix-command flakes" \
    github:nix-community/disko -- --mode zap_create_mount "${SRC_DIR}/modules/nixos/disk-config.nix"
}

setup_files() {
  progress "üìÅ Setting up files..."
  
  progress "Copying configuration to /mnt/etc/nixos"
  mkdir -p /mnt/etc/nixos
  cp -r "${SRC_DIR}"/* /mnt/etc/nixos/
  
  progress "Setting up user nix configuration in ~/nix"
  mkdir -p /mnt/home/david
  
  # Remove any existing nix directory to ensure clean clone
  if [ -d "/mnt/home/david/nix" ]; then
      rm -rf /mnt/home/david/nix
  fi
  
  # Clone the repository to ~/nix with proper branch
  git clone --depth 1 --branch master https://github.com/xlrinn/nix.git /mnt/home/david/nix

  # Configure git remotes and identity
  if [ -f /tmp/git_name.txt ]; then GIT_NAME=$(cat /tmp/git_name.txt); fi
  if [ -f /tmp/git_email.txt ]; then GIT_EMAIL=$(cat /tmp/git_email.txt); fi
  if [ -n "${GIT_NAME:-}" ]; then
    git -C /mnt/home/david/nix config user.name "$GIT_NAME"
  fi
  if [ -n "${GIT_EMAIL:-}" ]; then
    git -C /mnt/home/david/nix config user.email "$GIT_EMAIL"
  fi
  # Prefer SSH remote when available; fall back to HTTPS in live envs without keys
  HARD_REMOTE_SSH="git@github.com:xlrinn/nix.git"
  HARD_REMOTE_HTTPS="https://github.com/xlrinn/nix.git"
  progress "üîó Checking SSH access for: $HARD_REMOTE_SSH"
  if GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=accept-new" git ls-remote "$HARD_REMOTE_SSH" >/dev/null 2>&1; then
    progress "‚úÖ SSH available; setting origin to SSH"
    git -C /mnt/home/david/nix remote set-url origin "$HARD_REMOTE_SSH"
  else
    progress "‚ÑπÔ∏è SSH not available; keeping HTTPS origin"
    git -C /mnt/home/david/nix remote set-url origin "$HARD_REMOTE_HTTPS" >/dev/null 2>&1 || true
  fi
  # Always prefer SSH for pushes if/when keys are added later
  git -C /mnt/home/david/nix remote set-url --push origin "$HARD_REMOTE_SSH" >/dev/null 2>&1 || true
  git -C /mnt/home/david/nix fetch --all --prune || true
  git -C /mnt/home/david/nix fetch --unshallow >/dev/null 2>&1 || true
  git -C /mnt/home/david/nix branch --set-upstream-to origin/master master >/dev/null 2>&1 || true
  
  # Set proper ownership (1000:1000 is the default UID:GID for first user)
  chown -R 1000:1000 /mnt/home/david/nix
  
  # Ensure the directory is accessible
  chmod -R 755 /mnt/home/david/nix
  
  progress "‚úì Repository cloned to /mnt/home/david/nix"
}

install_nixos() {
  progress "üöÄ Installing NixOS..."
  
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64) FLAKE_TARGET="x86_64-linux" ;;
    aarch64) FLAKE_TARGET="aarch64-linux" ;;
    *)
      echo -e "${RED}Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  progress "Installing NixOS from /mnt/etc/nixos"
  nixos-install --no-root-passwd --flake "/mnt/etc/nixos#$FLAKE_TARGET" --no-write-lock-file
  
  chmod -R 775 /mnt/etc/nixos
  
  progress "üîê Setting root and user passwords..."
  echo "root:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  echo "david:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  
  progress "üè† Applying home-manager configurations..."
  chroot /mnt /nix/var/nix/profiles/system/sw/bin/bash -c "nixos-rebuild switch --flake '/etc/nixos#$FLAKE_TARGET' --no-write-lock-file"
}

auto_reboot() {
  progress "‚úÖ Installation complete! Rebooting in 5 seconds..."
  sleep 5
  reboot
}

# --- Main execution flow ---
cleanup
check_installer
download_config
run_apply
run_disko
setup_files
install_nixos
cleanup
auto_reboot 