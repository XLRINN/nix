#!/usr/bin/env bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
GEAR="⚙️"
DISK="💾"
COMPUTER="💻"
CHECK="✅"
WARNING="⚠️"
ERROR="❌"
INFO="ℹ️"
QUESTION="❓"
PARTY="🎉"

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}${INFO} Found primary network interface: $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}

# Set default values
export USERNAME="david"
export GIT_EMAIL="xlrin.morgan@gmail.com"
export GIT_NAME="david"

# Welcome message
_print "${CYAN}${ROCKET} Welcome to NixOS Desktop Installer!${NC}"
_print "${BLUE}${GEAR} Setting up your system with minimal questions...${NC}"
echo

# Smart disk detection
smart_disk_detection() {
  local main_disk=""
  local available_disks=""
  
  # Get available disks
  available_disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
  
  # Check if sda exists and is the main disk
  if echo "$available_disks" | grep -q "^sda"; then
    main_disk="sda"
    _print "${GREEN}${CHECK} Found main disk: sda${NC}"
    _print "${CYAN}${DISK} Available disks:${NC}"
    echo "$available_disks"
    _print "${YELLOW}${QUESTION} Use sda as boot disk? (Y/n): ${NC}"
    read -r use_sda
    if [[ "$use_sda" =~ ^[Nn]$ ]]; then
      _print "${YELLOW}${WARNING} Please select a different disk:${NC}"
      echo "$available_disks"
      _prompt "${YELLOW}${QUESTION} Enter disk name (e.g., nvme0n1): ${NC}" main_disk
    else
      _print "${GREEN}${CHECK} Using sda as boot disk${NC}"
    fi
  else
    _print "${YELLOW}${WARNING} sda not found. Please select a disk:${NC}"
    echo "$available_disks"
    _prompt "${YELLOW}${QUESTION} Enter disk name: ${NC}" main_disk
  fi
  
  export BOOT_DISK=$main_disk
  _print "${RED}${WARNING} WARNING: All data on $BOOT_DISK will be erased!${NC}"
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  export HOST_NAME="loki"
  
  _print "${CYAN}${COMPUTER} Default hostname: $HOST_NAME${NC}"
  _prompt "${YELLOW}${QUESTION} Change hostname? (y/N): ${NC}" change_hostname
  
  if [[ "$change_hostname" =~ ^[Yy]$ ]]; then
    _prompt "${YELLOW}${QUESTION} Enter new hostname: ${NC}" HOST_NAME
    _print "${GREEN}${CHECK} Hostname set to: $HOST_NAME${NC}"
  else
    _print "${GREEN}${CHECK} Using default hostname: $HOST_NAME${NC}"
  fi
  
  smart_disk_detection
fi

# Quick confirmation
_print "${CYAN}${INFO} Configuration Summary:${NC}"
_print "${GREEN}${CHECK} Username: $USERNAME${NC}"
_print "${GREEN}${CHECK} Email: $GIT_EMAIL${NC}"
_print "${GREEN}${CHECK} Name: $GIT_NAME${NC}"

if [[ "$OS" != "Darwin" ]]; then
  _print "${GREEN}${CHECK} Interface: $PRIMARY_IFACE${NC}"
  _print "${GREEN}${CHECK} Boot disk: $BOOT_DISK${NC}"
  _print "${GREEN}${CHECK} Hostname: $HOST_NAME${NC}"
fi

_prompt "${YELLOW}${QUESTION} Proceed with installation? (Y/n): ${NC}" proceed

case "$proceed" in
  [Nn] ) 
    _print "${RED}${ERROR} Installation cancelled.${NC}" 
    exit 1
    ;;
  * ) 
    _print "${GREEN}${CHECK} Proceeding with installation...${NC}"
    ;;
esac

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
    fi
  fi
}

# Apply configuration
_print "${BLUE}${GEAR} Applying configuration...${NC}"
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}${PARTY} Configuration applied successfully!${NC}"
