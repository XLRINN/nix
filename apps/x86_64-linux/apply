#!/usr/bin/env bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
GEAR="⚙️"
DISK="💾"
COMPUTER="💻"
CHECK="✅"
WARNING="⚠️"
ERROR="❌"
INFO="ℹ️"
QUESTION="❓"
PARTY="🎉"

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}${INFO} Found primary network interface: $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  echo -e "$1"
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  echo -n -e "$message"
  read -r $variable
}

# Set default values
export USERNAME="david"
export GIT_EMAIL="xlrin.morgan@gmail.com"
export GIT_NAME="david"

# Clear screen and show ASCII art
clear
echo
echo "    ███╗   ██╗██╗   ██╗██╗  ██╗"
echo "    ████╗  ██║╚██╗ ██╔╝╚██╗██╔╝"
echo "    ██╔██╗ ██║ ╚████╔╝  ╚███╔╝ "
echo "    ██║╚██╗██║  ╚██╔╝   ██╔██╗ "
echo "    ██║ ╚████║   ██║   ██╔╝ ██╗"
echo "    ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝"
echo "            --XLRINN--"
echo
echo "═══════════════════════════════════════════════════════════"
echo

# Enhanced drive selection (supports NONINTERACTIVE mode)
select_drive() {
  if [[ "${NONINTERACTIVE:-}" == "1" ]]; then
    local selected_drive="/dev/${BOOT_DISK:-nvme0n1}"
    _print "${GREEN}NONINTERACTIVE: selecting ${selected_drive}${NC}"
    sed -i "s|device = \"/dev/sda\";|device = \"$selected_drive\";|g" ./modules/nixos/disk-config.nix
    export BOOT_DISK=$(basename "$selected_drive")
    return
  fi
  _print "\n${YELLOW}=== Available Drives ===${NC}"
  _print "Scanning for available drives..."
  
  # Get list of drives (excluding loop devices and partitions)
  drives=($(lsblk -d -n -o NAME,SIZE,MODEL | grep -E '^(sd[a-z]|nvme[0-9]+n[0-9]+|hd[a-z])' | awk '{print $1}'))
  
  # Try to identify the live USB drive to exclude it
  live_usb=""
  if [ -f /proc/cmdline ]; then
    cmdline=$(cat /proc/cmdline)
    if echo "$cmdline" | grep -q "boot=live"; then
      # This is a live USB, try to identify it
      live_usb=$(lsblk -d -n -o NAME,MOUNTPOINT | grep "/run/archiso/bootmnt\|/run/archiso/airootfs\|/run/archiso/iso" | head -1 | awk '{print $1}')
    fi
  fi
  
  if [ ${#drives[@]} -eq 0 ]; then
    _print "${RED}No suitable drives found!${NC}"
    exit 1
  fi
  
  # Warn about live USB if detected
  if [ -n "$live_usb" ]; then
    _print "\n${YELLOW}${WARNING}  Live USB detected: /dev/$live_usb${NC}"
    _print "${YELLOW}Make sure you don't select this drive for installation!${NC}"
  fi
  
  _print "\n${GREEN}Available drives:${NC}"
  for i in "${!drives[@]}"; do
    drive_info=$(lsblk -d -n -o NAME,SIZE,MODEL /dev/${drives[$i]} | head -1)
    drive_size=$(echo "$drive_info" | awk '{print $2}')
    drive_model=$(echo "$drive_info" | awk '{for(i=3;i<=NF;i++) printf "%s ", $i; print ""}' | sed 's/ *$//')
    _print "  ${YELLOW}[$((i+1))]${NC} /dev/${drives[$i]} - ${GREEN}Size: $drive_size${NC} - ${CYAN}Model: $drive_model${NC}"
  done

  if [ ${#drives[@]} -eq 1 ]; then
    selected_drive="/dev/${drives[0]}"
    _print "\n${GREEN}Only one drive detected; auto-selecting: $selected_drive${NC}"
    sed -i "s|device = \"/dev/sda\";|device = \"$selected_drive\";|g" ./modules/nixos/disk-config.nix
    export BOOT_DISK=$(basename "$selected_drive")
    return
  fi

  while true; do
    _prompt "${YELLOW}${QUESTION} Select drive number (1-${#drives[@]}): ${NC}" choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#drives[@]}" ]; then
      selected_drive="/dev/${drives[$((choice-1))]}"
      _print "\n${GREEN}Selected drive: $selected_drive${NC}"
      sed -i "s|device = \"/dev/sda\";|device = \"$selected_drive\";|g" ./modules/nixos/disk-config.nix
      _print "${GREEN}${CHECK} Drive configuration updated!${NC}"
      _print "${GREEN}${CHECK} NixOS will be installed on: $selected_drive${NC}"
      _print "${YELLOW}Proceeding with installation...${NC}"
      export BOOT_DISK=$(basename $selected_drive)
      break
    else
      _print "${RED}Invalid selection. Please enter a number between 1 and ${#drives[@]}.${NC}"
    fi
  done
}

# Prompt for static IP (optional). Leave blank for DHCP.
prompt_ip() {
  if [[ "$OS" == "Darwin" ]]; then return; fi
  if [[ "${NONINTERACTIVE:-}" == "1" ]]; then
    IP_ADDR=${IP_ADDR:-}
    return
  fi
  while true; do
    _prompt "${YELLOW}${QUESTION} Static IPv4 (CIDR) or blank for DHCP: ${NC}" IP_ADDR
    if [[ -z "$IP_ADDR" ]]; then
      _print "${GREEN}${INFO} Using DHCP.${NC}"
      break
    fi
    if [[ "$IP_ADDR" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$ ]]; then
      # Basic octet range check
      ok=1
      IFS='./' read -r o1 o2 o3 o4 cidr <<<"$IP_ADDR"
      for o in $o1 $o2 $o3 $o4; do
        if (( o < 0 || o > 255 )); then ok=0; break; fi
      done
      if (( cidr < 0 || cidr > 32 )); then ok=0; fi
      if (( ok )); then
        _print "${GREEN}${CHECK} Static IP set: $IP_ADDR${NC}"
        break
      fi
    fi
    _print "${RED}Invalid format. Use e.g. 192.168.1.50/24 or leave blank.${NC}"
  done
  export IP_ADDR
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  if [[ "${NONINTERACTIVE:-}" == "1" ]]; then
    HOST_NAME=${HOST_NAME:-tyr}
    _print "${GREEN}NONINTERACTIVE: Hostname set to: $HOST_NAME${NC}"
  else
    while true; do
      _prompt "${YELLOW}${QUESTION} Hostname: ${NC}" HOST_NAME
      if [[ -z "$HOST_NAME" ]]; then
        _print "${RED}Hostname cannot be empty. Please enter a hostname.${NC}"
        continue
      fi
      # Optional: basic validation; allow a-z0-9- and dots, start/end with alnum
      if [[ ! "$HOST_NAME" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?)*$ ]]; then
        _print "${RED}${WARNING} Hostname contains unusual characters.${NC}"
        # Ask to re-enter
        continue
      fi
      _print "${GREEN}${CHECK} Hostname set to: $HOST_NAME${NC}"
      break
    done
  fi

  prompt_ip
  select_drive
fi

# Auto-detect Framework laptop and set nixos-hardware profile
configure_hardware_profile() {
  if [[ "$OS" == "Darwin" ]]; then return; fi
  local profile=""

  if command -v dmidecode >/dev/null 2>&1; then
    local vendor product
    vendor=$(dmidecode -s system-manufacturer 2>/dev/null || true)
    product=$(dmidecode -s system-product-name 2>/dev/null || true)
    if echo "$vendor" | grep -qi "framework" || echo "$product" | grep -qi "framework"; then
      # detect CPU vendor
      if command -v lscpu >/dev/null 2>&1 && lscpu | grep -qi amd; then
        profile="framework/13-inch/amd/7040"
      else
        profile="framework/13-inch/intel"
      fi
    fi
  fi

  if [[ -n "$profile" ]]; then
    _print "${GREEN}${INFO} Detected Framework laptop; applying nixos-hardware profile: ${profile}${NC}"
    # Write a literal path into hardware-profile.nix to avoid referencing config during module eval
    cat > ./hosts/nixos/hardware-profile.nix <<EOF
{ inputs, lib, ... }:
let
  path = "${profile}";
in
{
  imports = lib.optionals (path != null) [ (inputs.nixos-hardware + "/" + path) ];
}
EOF
  else
    _print "${CYAN}${INFO} No vendor-specific hardware profile applied.${NC}"
  fi
}

# Run hardware configuration before applying token replacements
configure_hardware_profile

# Show installation starting
echo
_print "${CYAN}${INFO} Starting installation...${NC}"

# Function to replace tokens in each file
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
    else
      # Linux or other
      sed -i -e "s/%USER%/$USERNAME/g" "$file"
      sed -i -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i -e "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i -e "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i -e "s/%DISK%/$BOOT_DISK/g" "$file"
      sed -i -e "s/%HOST%/$HOST_NAME/g" "$file"
      if [[ -n "$IP_ADDR" ]]; then
        sed -i -e "s/%IP%/$IP_ADDR/g" "$file"
      else
        sed -i -e "s/%IP%/dhcp/g" "$file"
      fi
    fi
  fi
}

# Apply configuration
_print "${BLUE}${GEAR} Applying configuration...${NC}"
export -f replace_tokens
find . -type f -exec bash -c 'replace_tokens "$0"' {} \;

echo "$USERNAME" > /tmp/username.txt
# Persist git identity for installer phase
echo -n "$GIT_NAME" > /tmp/git_name.txt
echo -n "$GIT_EMAIL" > /tmp/git_email.txt
_print "${GREEN}${PARTY} Ready!${NC}"

## Bitwarden legacy discovery removed in favor of sopswarden.
_print "${CYAN}${INFO} Using sopswarden for secrets. After first boot run:${NC}"
_print "${YELLOW}  rbw login && rbw unlock${NC}"
_print "${YELLOW}  sops-sync && sops-deploy${NC}"
