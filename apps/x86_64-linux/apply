#!/usr/bin/env bash

VERSION=1.0

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Determine the operating system
export OS=$(uname)

# Primary network interface
if [[ "$OS" != "Darwin" ]]; then
  export PRIMARY_IFACE=$(ip -o -4 route show to default | awk '{print $5}')
  echo -e "${GREEN}Found primary network interface $PRIMARY_IFACE${NC}"
fi

# Custom print function
_print() {
  if [[ "$OS" == "Darwin" ]]; then
    echo -e "$1"
  else
    echo "$1"
  fi
}

# Custom prompt function
_prompt() {
  local message="$1"
  local variable="$2"

  _print "$message"
  read -r $variable
}



# Check if running non-interactively
if [[ "$1" == "--non-interactive" ]]; then
  # Use defaults without prompting
  export USERNAME="david"
  export GIT_EMAIL="xlrin.morgan@gmail.com"
  export GIT_NAME="david"
  export HOST_NAME="server"
  export BOOT_DISK="sda"
else
  # Set default values
  export USERNAME="david"
  export GIT_EMAIL="xlrin.morgan@gmail.com"
  export GIT_NAME="david"

  # Ask if user wants to change defaults
  _print "${YELLOW}Default values:${NC}"
  _print "${GREEN}Username: $USERNAME${NC}"
  _print "${GREEN}Email: $GIT_EMAIL${NC}"
  _print "${GREEN}Name: $GIT_NAME${NC}"

  _prompt "${YELLOW}Do you want to change these defaults? (y/N): ${NC}" change_defaults

if [[ "$change_defaults" =~ ^[Yy]$ ]]; then
  # If the username is 'nixos' or 'root', ask the user for their username
  if [[ "$USERNAME" == "nixos" ]] || [[ "$USERNAME" == "root" ]]; then
    _prompt "${YELLOW}You're running as $USERNAME. Please enter your desired username: ${NC}" USERNAME
  else
    _prompt "${YELLOW}Please enter your username: ${NC}" USERNAME
  fi
  
  _prompt "${YELLOW}Please enter your email: ${NC}" GIT_EMAIL
  _prompt "${YELLOW}Please enter your name: ${NC}" GIT_NAME
else
  _print "${GREEN}Using default values.${NC}"
fi
fi

select_boot_disk() {
  local disks
  local _boot_disk

  _print "${YELLOW}Available disks:${NC}"
  disks=$(lsblk -nd --output NAME,SIZE | grep -v loop)
  echo "$disks"

  _prompt "${YELLOW}Please enter the name of your boot disk (e.g., sda, nvme0n1). Do not include the full path ("/dev/"): ${NC}" _boot_disk
  export BOOT_DISK=$_boot_disk
}

# Set hostname and find primary disk if this is NixOS
if [[ "$OS" != "Darwin" ]]; then
  if [[ "$1" == "--non-interactive" ]]; then
    # Use defaults for non-interactive mode
    export HOST_NAME="server"
    export BOOT_DISK="sda"
  else
    export HOST_NAME="loki"
    
    _print "${YELLOW}Default hostname: $HOST_NAME${NC}"
    _prompt "${YELLOW}Do you want to change the hostname? (y/N): ${NC}" change_hostname
    
    if [[ "$change_hostname" =~ ^[Yy]$ ]]; then
      _prompt "${YELLOW}Please enter a hostname for the system: ${NC}" HOST_NAME
    else
      _print "${GREEN}Using default hostname: $HOST_NAME${NC}"
    fi
    
    select_boot_disk
  fi
fi

# Confirmation step
confirm_details() {
  _print "${GREEN}Username: $USERNAME"
  _print "Email: $GIT_EMAIL"
  _print "Name: $GIT_NAME${NC}"

  if([[ "$OS" != "Darwin" ]]); then
    _print "${GREEN}Primary interface: $PRIMARY_IFACE"
    _print "Boot disk: $BOOT_DISK"
    _print "Hostname: $HOST_NAME${NC}"
  fi

  _prompt "${YELLOW}Is this correct? yes/no: ${NC}" choice

  case "$choice" in
    [Nn] | [Nn][Oo] ) 
      _print "${RED}Exiting script.${NC}" 
      exit 1
      ;;
    [Yy] | [Yy][Ee][Ss] ) 
      _print "${GREEN}Continuing...${NC}"
      ;;
    * ) 
      _print "${RED}Invalid option. Exiting script.${NC}" 
      exit 1
      ;;
  esac
}

# Call the confirmation function only if not in non-interactive mode
if [[ "$1" != "--non-interactive" ]]; then
  confirm_details
fi

# Token replacement function
replace_tokens() {
  local file="$1"
  if [[ $(basename $1) != "apply" ]]; then
    if [[ "$OS" == "Darwin" ]]; then
      # macOS
      LC_ALL=C LANG=C sed -i '' -e "s/%USER%/$USERNAME/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      LC_ALL=C LANG=C sed -i '' -e "s/%NAME%/$GIT_NAME/g" "$file"
    else
      # Linux
      sed -i "s/%USER%/$USERNAME/g" "$file"
      sed -i "s/%EMAIL%/$GIT_EMAIL/g" "$file"
      sed -i "s/%NAME%/$GIT_NAME/g" "$file"
      sed -i "s/%HOST%/$HOST_NAME/g" "$file"
      sed -i "s/%INTERFACE%/$PRIMARY_IFACE/g" "$file"
      sed -i "s/%DISK%/$BOOT_DISK/g" "$file"
    fi
  fi
}

# Replace tokens in all Nix files
if [[ "$OS" != "Darwin" ]]; then
  # Traverse directories and call replace_tokens on each Nix file
  export -f replace_tokens
  find . -type f -name "*.nix" -exec bash -c 'replace_tokens "$0"' {} \;
fi

echo "Configuration values collected:"
echo "Username: $USERNAME"
echo "Email: $GIT_EMAIL"
echo "Name: $GIT_NAME"
if [[ "$OS" != "Darwin" ]]; then
  echo "Interface: $PRIMARY_IFACE"
  echo "Disk: $BOOT_DISK"
  echo "Hostname: $HOST_NAME"
fi

echo "$USERNAME" > /tmp/username.txt
_print "${GREEN}User $USERNAME information applied.${NC}"
