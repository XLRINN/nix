#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
_print() {
    echo -e "${1}${2}${NC}"
}

# Function to print section headers
_section() {
    echo
    _print "${BLUE}" "=== $1 ==="
    echo
}

# Function to print success messages
_success() {
    _print "${GREEN}" "✅ $1"
}

# Function to print warning messages
_warning() {
    _print "${YELLOW}" "⚠️  $1"
}

# Function to print error messages
_error() {
    _print "${RED}" "❌ $1"
}

# Function to check if running as root
_check_root() {
    if [[ $EUID -eq 0 ]]; then
        _error "This script should not be run as root"
        exit 1
    fi
}

# Function to check if we're on the right system
_check_system() {
    if [[ $(uname -s) != "Linux" ]]; then
        _error "This script is for Linux systems only"
        exit 1
    fi
    
    if [[ $(uname -m) != "x86_64" ]]; then
        _error "This script is for x86_64 systems only"
        exit 1
    fi
}

# Function to check if Nix is available
_check_nix() {
    if ! command -v nix &> /dev/null; then
        _error "Nix is not installed or not in PATH"
        exit 1
    fi
}

# Function to create CLI-only configuration
_create_cli_config() {
    _section "Creating CLI-only configuration"
    
    # Create temporary CLI-only config that imports your existing config
    cat > /tmp/cli-only.nix << 'EOF'
{ config, inputs, pkgs, ... }:

{
  imports = [
    ../../hosts/nixos/default.nix
  ];

  # Override desktop-specific configurations
  services.xserver.enable = false;
  services.displayManager.enable = false;
  services.desktopManager.enable = false;
  
  # Disable desktop-specific services
  services.gdm.enable = false;
  services.gnome.gdm.enable = false;
  services.gnome.gnome-keyring.enable = false;
  
  # Disable desktop applications
  environment.systemPackages = with pkgs; [
    # Keep essential CLI tools
    agenix.packages."${pkgs.system}".default
    gitAndTools.gitFull
    neovim
    gh  # GitHub CLI
    inputs.claude-desktop.packages.${pkgs.system}.claude-desktop
    # CLI tools
    htop
    tmux
    ripgrep
    fd
    fzf
    bat
    exa
    jq
    curl
    wget
    tree
    unzip
    zip
    rsync
    ncdu
    lsof
    netcat
    nmap
    traceroute
    mtr
    iotop
    iftop
    nethogs
    tcpdump
    wireshark-cli
    # Development tools
    gcc
    gnumake
    cmake
    pkg-config
    python3
    nodejs
    rustc
    cargo
  ];

  # Keep SSH server for remote access
  services.openssh = {
    enable = true;
    settings = {
      PubkeyAuthentication = true;
      PasswordAuthentication = false;
      PermitRootLogin = "prohibit-password";
      KexAlgorithms = [ "curve25519-sha256@libssh.org" "diffie-hellman-group16-sha512" ];
      Ciphers = [ "chacha20-poly1305@openssh.com" "aes256-gcm@openssh.com" ];
      MACs = [ "hmac-sha2-256-etm@openssh.com" "hmac-sha2-512-etm@openssh.com" ];
    };
  };

  # Keep secrets management
  age.identityPaths = [
    "/home/david/.ssh/id_ed25519"
  ];

  # Environment variables for secrets
  environment.variables = {
    AVANTE_API_KEY = config.age.secrets."avante-api-key".path;
    GITHUB_TOKEN = config.age.secrets."github-token".path;
    GH_TOKEN = config.age.secrets."github-token".path;
    GH_CONFIG_DIR = "/home/david/.config/gh";
  };
}
EOF

    _success "CLI-only configuration created"
}

# Function to build and switch to CLI-only system
_build_cli_system() {
    _section "Building CLI-only NixOS system"
    
    _warning "This will apply a CLI-only configuration to your existing system"
    _warning "Desktop applications will be disabled"
    
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        _warning "Aborted"
        exit 1
    fi
    
    _print "${BLUE}" "Building CLI-only system..."
    
    # Build the system with the CLI-only config
    if nix build .#nixosConfigurations.x86_64-linux.config.system.build.toplevel --impure; then
        _success "Build completed successfully"
    else
        _error "Build failed"
        exit 1
    fi
    
    _print "${BLUE}" "Switching to CLI-only system..."
    
    # Switch to the new system
    if sudo ./result/bin/switch-to-configuration switch; then
        _success "Successfully switched to CLI-only system"
        _warning "Desktop applications are now disabled"
        _warning "You can SSH into this system for remote management"
    else
        _error "Failed to switch configuration"
        exit 1
    fi
}

# Function to clean up
_cleanup() {
    _section "Cleaning up"
    
    if [[ -f /tmp/cli-only.nix ]]; then
        rm /tmp/cli-only.nix
        _success "Cleaned up temporary files"
    fi
}

# Main execution
main() {
    _print "${GREEN}" "🚀 CLI-Only NixOS Configuration Tool"
    echo
    
    _check_root
    _check_system
    _check_nix
    
    _create_cli_config
    _build_cli_system
    _cleanup
    
    _success "CLI-only system setup complete!"
    _print "${YELLOW}" "Your system is now configured for CLI-only operation"
    _print "${YELLOW}" "Desktop applications are disabled"
    _print "${YELLOW}" "You can SSH into this system for remote management"
}

# Run main function
main "$@" 