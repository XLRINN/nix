#!/usr/bin/env bash
set -eu

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color



ensure_nix() {
  if [ -e /etc/NIXOS ]; then
    echo -e "${GREEN}Running in the NixOS installer environment.${NC}"
  else
    echo -e "${YELLOW}NixOS installer environment not detected. Checking for Nix...${NC}"
    if ! command -v nix >/dev/null 2>&1; then
      echo -e "${CYAN}Installing Nix using Determinate Systems installer...${NC}"
      if curl -fsSL https://install.determinate.systems/nix | sh -s -- install --yes; then
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh 2>/dev/null || true
        if command -v nix >/dev/null 2>&1; then
          echo -e "${GREEN}✓ Nix installed successfully${NC}"
        else
          echo -e "${RED}Nix installation completed but nix command not found${NC}"
          exit 1
        fi
      else
        echo -e "${RED}Failed to run Determinate Systems installer${NC}"
        exit 1
      fi
    else
      echo -e "${GREEN}✓ Nix is already installed${NC}"
    fi
  fi
}

cleanup() {
  rm -rf nixos-config-main.zip nixos-config-main nixos-config
}

download_config() {
  curl -LJ0 https://github.com/xlrinn/nix/archive/server.zip -o nixos-config-main.zip
  unzip nixos-config-main.zip
  mv nix-server nixos-config
  cd nixos-config
}

run_apply() {
  ./apps/x86_64-linux/apply
  if [ ! -f /tmp/username.txt ]; then
    echo -e "\e[1;31mError: /tmp/username.txt does not exist.\e[0m"
    exit 1
  fi
  export USERNAME=$(cat /tmp/username.txt)
  echo -e "${GREEN}✓ Configuration complete${NC}"
}

run_disko() {
  nix run --extra-experimental-features nix-command --extra-experimental-features flakes \
    --option cores 0 --option max-jobs auto \
    github:nix-community/disko -- --mode zap_create_mount ./modules/server/disk-config.nix
  echo -e "${GREEN}✓ Disk formatted and mounted${NC}"
}

setup_files() {
  mkdir -p /mnt/etc/nixos
  cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
  echo -e "${GREEN}✓ Files copied to system${NC}"
}

install_nixos() {
  ARCH=$(uname -m)

  case "$ARCH" in
    x86_64)
      FLAKE_TARGET="x86_64-linux-server"
      ;;
    aarch64)
      FLAKE_TARGET="aarch64-linux-server"
      ;;
    *)
      echo -e "${RED}Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  nixos-install --flake .#$FLAKE_TARGET --option download-buffer-size 134217728 --option cores 0 --option max-jobs auto
  chmod -R 775 /mnt/etc/nixos
  
  # Copy config to user's home directory (like dustinlyons does)
  export USERNAME=$(cat /tmp/username.txt)
  mkdir -p /mnt/home/$USERNAME/.local/share/src
  cp -r /mnt/etc/nixos /mnt/home/$USERNAME/.local/share/src/
  
  # Set up git remote for the user's config
  chroot /mnt bash -c "cd /home/$USERNAME/.local/share/src/nixos && git init && git remote add origin https://github.com/xlrinn/nix.git"
  
  # Fix ownership after user is created
  chroot /mnt bash -c "chown -R $USERNAME:users /home/$USERNAME/.local/share/src/nixos" || echo "Note: Ownership will be set correctly after first boot"
  
  echo -e "${GREEN}✓ NixOS Server installed successfully${NC}"
  echo -e "${GREEN}✓ Configuration copied to /home/$USERNAME/.local/share/src/nixos${NC}"
  echo -e "${GREEN}✓ Git remote configured${NC}"
}

prompt_reboot() {
  read -p "Do you want to reboot now? (y/yes) " choice
  case "$choice" in
  y|Y|yes|YES ) echo -e "\e[1;32mRebooting...\e[0m" && reboot;;
  * ) echo -e "\e[1;33mReboot skipped.\e[0m";;
  esac
}

cleanup
ensure_nix
download_config
run_apply
run_disko
setup_files
install_nixos
cleanup
prompt_reboot
