#!/usr/bin/env bash
set -eu

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
SERVER="🖥️"
DISK="💾"
NETWORK="🌐"
USER="👤"
EMAIL="📧"
HOSTNAME="🏷️"
SUCCESS="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"

# Custom print function
_print() {
  echo -e "$1"
}

# Custom prompt function (commented out for testing)
# _prompt() {
#   local message="$1"
#   local variable="$2"
#   _print "$message"
#   read -r $variable
# }

check_installer() {
  if [ -e /etc/NIXOS ]; then
    _print "${GREEN}${SUCCESS} Running in the NixOS installer environment.${NC}"
  else
    _print "${RED}${ERROR} Not running in the NixOS installer environment.${NC}"
    exit 1
  fi
}

# Set defaults and get user input
get_user_input() {
  _print "${CYAN}${USER} Server Configuration${NC}"
  
  # Extract hostname from default.nix
  _print "${BLUE}Extracting hostname from configuration...${NC}"
  export HOST_NAME=$(grep -o 'hostName = "[^"]*"' hosts/server/default.nix | cut -d'"' -f2)
  if [ -z "$HOST_NAME" ]; then
    export HOST_NAME="loki"  # fallback
  fi
  _print "${GREEN}${SUCCESS} Hostname: $HOST_NAME${NC}"
  
  # Extract username from default.nix
  _print "${BLUE}Extracting username from configuration...${NC}"
  export USERNAME=$(grep -o 'user = "[^"]*"' hosts/server/default.nix | cut -d'"' -f2)
  if [ -z "$USERNAME" ]; then
    export USERNAME="david"  # fallback
  fi
  export GIT_NAME="$USERNAME"
  export GIT_EMAIL="xlrin.morgan@gmail.com"
  _print "${GREEN}${SUCCESS} Username: $USERNAME${NC}"
  
  # Use DHCP by default
  export NETWORK_CONFIG="dhcp"
  _print "${GREEN}${SUCCESS} Network: DHCP${NC}"
  
  # Automatically use sda as boot disk
  export BOOT_DISK="sda"
  _print "${GREEN}${SUCCESS} Boot disk: $BOOT_DISK${NC}"
  
  # Validate the disk exists
  if [ ! -b "/dev/$BOOT_DISK" ]; then
    _print "${RED}${ERROR} Disk /dev/$BOOT_DISK does not exist!${NC}"
    _print "${YELLOW}Available disks:${NC}"
    lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0
    exit 1
  fi
}

# Show configuration summary and confirm
confirm_configuration() {
  _print "${CYAN}${INFO} Configuration Summary${NC}"
  _print "${GREEN}Username: $USERNAME${NC}"
  _print "${GREEN}Email: $GIT_EMAIL${NC}"
  _print "${GREEN}Name: $GIT_NAME${NC}"
  _print "${GREEN}Hostname: $HOST_NAME${NC}"
  _print "${GREEN}Boot disk: $BOOT_DISK${NC}"
  _print "${GREEN}Network: $NETWORK_CONFIG${NC}"
  
  _print "${GREEN}${SUCCESS} Proceeding with installation...${NC}"
}

download_config() {
  _print "${CYAN}${SERVER} Downloading Configuration${NC}"
  curl -LJ0 https://github.com/xlrinn/nix/archive/server.zip -o nixos-config-main.zip
  unzip nixos-config-main.zip
  
  # Remove existing directory if it exists
  rm -rf nixos-config
  
  # Check what was extracted
  _print "${BLUE}Checking extracted contents...${NC}"
  ls -la
  
  # Look for the server directory
  if [ -d "nix-server" ]; then
    mv nix-server nixos-config
  else
    _print "${RED}${ERROR} Could not find nix-server directory in extracted contents${NC}"
    _print "${YELLOW}Available directories:${NC}"
    ls -d */
    exit 1
  fi
  
  cd nixos-config
  
  # Verify the directory structure
  _print "${BLUE}Verifying directory structure...${NC}"
  if [ ! -f "modules/server/disk-config.nix" ]; then
    _print "${RED}${ERROR} Server disk configuration not found!${NC}"
    _print "${YELLOW}Available files:${NC}"
    find . -name "*.nix" -type f | head -10
    exit 1
  fi
  
  _print "${GREEN}${SUCCESS} Configuration downloaded and verified!${NC}"
}

# Use the desktop's proven disk setup process
setup_disk_with_desktop_method() {
  _print "${CYAN}${DISK} Setting up disk using desktop method${NC}"
  
  # Set environment variables for the apply script
  export USERNAME="$USERNAME"
  export GIT_EMAIL="$GIT_EMAIL"
  export GIT_NAME="$GIT_NAME"
  export HOST_NAME="$HOST_NAME"
  export BOOT_DISK="$BOOT_DISK"
  export NETWORK_CONFIG="$NETWORK_CONFIG"
  
  _print "${GREEN}${SUCCESS} Using hardcoded /dev/sda for disk configuration${NC}"
  _print "${GREEN}${SUCCESS} Disk configuration ready!${NC}"
}

# Manual disk partitioning alternative to Disko
setup_disk_manual() {
  _print "${CYAN}${DISK} Setting up disk manually${NC}"
  
  # Check if disk exists
  if [ ! -b "/dev/$BOOT_DISK" ]; then
    _print "${RED}${ERROR} Disk /dev/$BOOT_DISK does not exist!${NC}"
    _print "${YELLOW}Available disks:${NC}"
    lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0
    return 1
  fi
  
  _print "${YELLOW}Unmounting any existing mounts...${NC}"
  sudo umount /mnt/boot 2>/dev/null || true
  sudo umount /mnt 2>/dev/null || true
  
  _print "${YELLOW}Wiping disk /dev/$BOOT_DISK...${NC}"
  sudo wipefs -a "/dev/$BOOT_DISK" 2>/dev/null || true
  
  _print "${YELLOW}Creating MBR partition table...${NC}"
  sudo parted "/dev/$BOOT_DISK" mklabel msdos
  
  _print "${YELLOW}Creating boot partition (512MB)...${NC}"
  echo "mkpart primary ext4 1MiB 513MiB" | sudo parted "/dev/$BOOT_DISK"
  
  _print "${YELLOW}Creating root partition (remaining space)...${NC}"
  echo "mkpart primary ext4 513MiB 100%" | sudo parted "/dev/$BOOT_DISK"
  
  _print "${YELLOW}Setting boot flag...${NC}"
  echo "set 1 boot on" | sudo parted "/dev/$BOOT_DISK"
  
  _print "${YELLOW}Formatting partitions...${NC}"
  sudo mkfs.ext4 -F "/dev/${BOOT_DISK}1"  # Boot partition (force)
  sudo mkfs.ext4 -F "/dev/${BOOT_DISK}2"  # Root partition (force)
  
  _print "${YELLOW}Mounting partitions...${NC}"
  
  # Create mount points
  _print "${YELLOW}Creating mount points...${NC}"
  sudo mkdir -p /mnt
  sudo mkdir -p /mnt/boot
  
  # Verify mount points exist
  if [ ! -d "/mnt" ]; then
    _print "${RED}${ERROR} Failed to create /mnt directory${NC}"
    return 1
  fi
  
  if [ ! -d "/mnt/boot" ]; then
    _print "${RED}${ERROR} Failed to create /mnt/boot directory${NC}"
    return 1
  fi
  
  _print "${YELLOW}Mounting root partition...${NC}"
  
  # Check if partitions exist
  if [ ! -b "/dev/${BOOT_DISK}1" ]; then
    _print "${RED}${ERROR} Boot partition /dev/${BOOT_DISK}1 does not exist${NC}"
    return 1
  fi
  
  if [ ! -b "/dev/${BOOT_DISK}2" ]; then
    _print "${RED}${ERROR} Root partition /dev/${BOOT_DISK}2 does not exist${NC}"
    return 1
  fi
  
  sudo mount "/dev/${BOOT_DISK}2" /mnt || {
    _print "${RED}${ERROR} Failed to mount root partition${NC}"
    return 1
  }
  
  _print "${YELLOW}Mounting boot partition...${NC}"
  sudo mount "/dev/${BOOT_DISK}1" /mnt/boot || {
    _print "${RED}${ERROR} Failed to mount boot partition${NC}"
    return 1
  }
  
  _print "${GREEN}${SUCCESS} Manual disk setup complete!${NC}"
}

# Simple single partition setup
setup_disk_simple() {
  _print "${CYAN}${DISK} Setting up disk with single partition${NC}"
  
  # Check if disk exists
  if [ ! -b "/dev/$BOOT_DISK" ]; then
    _print "${RED}${ERROR} Disk /dev/$BOOT_DISK does not exist!${NC}"
    _print "${YELLOW}Available disks:${NC}"
    lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0
    return 1
  fi
  
  _print "${YELLOW}Unmounting any existing mounts...${NC}"
  sudo umount /mnt/boot 2>/dev/null || true
  sudo umount /mnt 2>/dev/null || true
  
  _print "${YELLOW}Wiping disk /dev/$BOOT_DISK...${NC}"
  sudo wipefs -a "/dev/$BOOT_DISK" 2>/dev/null || true
  
  _print "${YELLOW}Creating MBR partition table...${NC}"
  sudo parted "/dev/$BOOT_DISK" mklabel msdos
  
  _print "${YELLOW}Creating single root partition...${NC}"
  echo "mkpart primary ext4 1MiB 100%" | sudo parted "/dev/$BOOT_DISK"
  
  _print "${YELLOW}Setting boot flag...${NC}"
  echo "set 1 boot on" | sudo parted "/dev/$BOOT_DISK"
  
  _print "${YELLOW}Formatting partition...${NC}"
  sudo mkfs.ext4 -F "/dev/${BOOT_DISK}1"
  
  _print "${YELLOW}Mounting partition...${NC}"
  
  # Create mount point
  _print "${YELLOW}Creating mount point...${NC}"
  sudo mkdir -p /mnt
  
  # Verify mount point exists
  if [ ! -d "/mnt" ]; then
    _print "${RED}${ERROR} Failed to create /mnt directory${NC}"
    return 1
  fi
  
  sudo mount "/dev/${BOOT_DISK}1" /mnt || {
    _print "${RED}${ERROR} Failed to mount root partition${NC}"
    return 1
  }
  
  _print "${GREEN}${SUCCESS} Simple disk setup complete!${NC}"
}

run_disko() {
  _print "${CYAN}${DISK} Setting up disk with Disko${NC}"
  
  # Use disko for disk setup
  _print "${YELLOW}Setting up disk with disko...${NC}"
  
  # Ensure we're in the correct directory and the file exists
  if [ ! -f "./modules/server/disk-config.nix" ]; then
    _print "${RED}${ERROR} Disk configuration file not found!${NC}"
    _print "${YELLOW}Current directory: $(pwd)${NC}"
    _print "${YELLOW}Looking for: ./modules/server/disk-config.nix${NC}"
    ls -la modules/server/ 2>/dev/null || _print "${YELLOW}modules/server/ directory not found${NC}"
    exit 1
  fi
  
  _print "${BLUE}${INFO} Using disk config: $(pwd)/modules/server/disk-config.nix${NC}"
  
  # Use the official Disko command pattern from documentation
  _print "${BLUE}${INFO} Running disko with official pattern...${NC}"
  
  # Run disko without confirmation for faster testing
  if sudo nix --experimental-features "nix-command flakes" run github:nix-community/disko/latest -- --mode zap_create_mount "./modules/server/disk-config.nix" 2>/dev/null; then
    _print "${GREEN}${SUCCESS} Disk setup complete!${NC}"
  else
    _print "${RED}${ERROR} Disko failed!${NC}"
    _print "${YELLOW}${WARNING} Check the error messages above${NC}"
    exit 1
  fi
}

setup_files() {
  _print "${CYAN}${SERVER} Setting up NixOS files${NC}"
  
  sudo mkdir -p /mnt/etc/nixos
  sudo cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
  _print "${GREEN}${SUCCESS} Files copied to /mnt/etc/nixos${NC}"
}

install_nixos() {
  _print "${CYAN}${ROCKET} Installing NixOS${NC}"
  
  ARCH=$(uname -m)

  case "$ARCH" in
    x86_64)
      FLAKE_TARGET="x86_64-linux-server"
      ;;
    aarch64)
      FLAKE_TARGET="aarch64-linux-server"
      ;;
    *)
      _print "${RED}${ERROR} Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  _print "${BLUE}Starting NixOS installation with target: $FLAKE_TARGET${NC}"
  
  # Check available disk space
  _print "${YELLOW}Checking available disk space...${NC}"
  df -h /
  _print "${YELLOW}Memory usage:${NC}"
  free -h
  _print "${YELLOW}Current processes:${NC}"
  ps aux | head -5
  
  # Aggressive cleanup for Hetzner installer environment
  _print "${YELLOW}Aggressive cleanup for Hetzner installer environment...${NC}"
  sudo nix-collect-garbage -d || true
  sudo rm -rf /tmp/* || true
  sudo rm -rf /var/tmp/* || true
  sudo systemctl restart nix-daemon || true
  
  # Kill unnecessary processes to free memory
  _print "${YELLOW}Killing unnecessary processes...${NC}"
  sudo pkill -f "nix-daemon" || true
  sudo pkill -f "nix-store" || true
  sudo pkill -f "nix-build" || true
  sleep 5
  
  # Restart nix-daemon with limited resources
  sudo systemctl restart nix-daemon || true
  sleep 10
  
  # Clear Nix store cache
  _print "${YELLOW}Clearing Nix store cache...${NC}"
  sudo nix-collect-garbage -d || true
  sudo rm -rf /nix/var/nix/gcroots/* || true
  
  # Check space again
  _print "${YELLOW}Disk space after cleanup:${NC}"
  df -h /
  
  # Install NixOS
  _print "${BLUE}Installing NixOS...${NC}"
  _print "${YELLOW}Target: $FLAKE_TARGET${NC}"
  _print "${YELLOW}Current directory: $(pwd)${NC}"
  _print "${YELLOW}Available flake targets:${NC}"
  nix flake show . 2>/dev/null || echo "Could not show flake targets"
  
  # Set memory limits to prevent out of memory errors
  _print "${YELLOW}Setting memory limits...${NC}"
  ulimit -v 2097152  # 2GB virtual memory limit
  ulimit -m 1048576  # 1GB memory limit
  
  # Set Nix memory limits
  export NIX_BUILD_CORES=1
  export NIX_REMOTE=daemon
  
  # Capture all output for debugging
  _print "${BLUE}Starting installation with full output capture...${NC}"
  if timeout 7200 sudo nixos-install --flake .#$FLAKE_TARGET --no-root-passwd --no-channel-copy --verbose 2>&1 | tee /tmp/nixos-install.log; then
    _print "${GREEN}${SUCCESS} NixOS installation completed successfully${NC}"
    sudo chmod -R 775 /mnt/etc/nixos
    
    # Verify installation was successful
    _print "${BLUE}Verifying installation...${NC}"
    
    # Check for essential system directories and files
    if [ -d "/mnt/boot" ] && [ -d "/mnt/nix" ]; then
      _print "${GREEN}${SUCCESS} Installation verification passed - boot and nix directories found${NC}"
      _print "${YELLOW}Note: System binaries will be created on first boot${NC}"
      return 0
    else
      _print "${RED}${ERROR} Installation verification failed - essential directories missing${NC}"
      _print "${YELLOW}Checking what was installed:${NC}"
      ls -la /mnt/
      return 1
    fi
  else
    _print "${RED}${ERROR} Installation failed${NC}"
    _print "${YELLOW}Installation log saved to /tmp/nixos-install.log${NC}"
    _print "${YELLOW}Last 20 lines of log:${NC}"
    tail -20 /tmp/nixos-install.log 2>/dev/null || echo "Could not read log file"
    _print "${YELLOW}Checking what was installed:${NC}"
    ls -la /mnt/ 2>/dev/null || echo "No /mnt directory"
    _print "${YELLOW}Manual commands to try:${NC}"
    _print "${YELLOW}1. sudo nixos-install --flake .#$FLAKE_TARGET --no-root-passwd --no-channel-copy${NC}"
    _print "${YELLOW}2. Check memory: free -h${NC}"
    _print "${YELLOW}3. Check disk space: df -h${NC}"
    _print "${YELLOW}4. Check if target exists: nix flake show .${NC}"
    return 1
  fi
}

prompt_reboot() {
  _print "${CYAN}${INFO} Installation Complete!${NC}"
  
  # Check if installation was actually successful
  if [ -f "/mnt/etc/nixos/configuration.nix" ] || [ -f "/mnt/etc/nixos/default.nix" ] || [ -f "/mnt/etc/nixos/flake.nix" ]; then
    if [ -d "/mnt/boot" ] && [ -d "/mnt/nix" ]; then
      _print "${GREEN}${SUCCESS} Installation verification passed - system is ready for password setup${NC}"
      
      # Drop into the installed system for manual password setup
      _print "${BLUE}${INFO} Dropping into installed system for password setup...${NC}"
      _print "${YELLOW}You are now in your installed NixOS system.${NC}"
      _print "${YELLOW}You can now set passwords directly:${NC}"
      _print "${YELLOW}1. Set root password: passwd root${NC}"
      _print "${YELLOW}2. Set user password: passwd david${NC}"
      _print "${YELLOW}3. Exit when done: exit${NC}"
      
      # Chroot into the installed system
      _print "${YELLOW}System binaries not yet created - skipping chroot${NC}"
      _print "${YELLOW}You can set passwords after first boot${NC}"
      _print "${GREEN}${SUCCESS} Installation complete! Reboot to finish setup.${NC}"
      exit 0
    else
      _print "${RED}${ERROR} Installation verification failed - boot or nix directories missing${NC}"
      _print "${YELLOW}The system may not be properly installed.${NC}"
      _print "${YELLOW}Checking what was installed:${NC}"
      ls -la /mnt/
      
      _print "${YELLOW}${WARNING} Manual troubleshooting required:${NC}"
      _print "${YELLOW}1. Check if /mnt/boot and /mnt/nix directories exist${NC}"
      _print "${YELLOW}2. Try manual installation: sudo nixos-install --flake .#x86_64-linux-server --no-root-passwd --no-channel-copy${NC}"
      _print "${YELLOW}3. Check disk space and memory${NC}"
      
      # Drop into shell for manual troubleshooting
      exec /bin/bash
    fi
  else
    _print "${RED}${ERROR} Installation verification failed - configuration files not found${NC}"
    _print "${YELLOW}The system may not be properly installed.${NC}"
    _print "${YELLOW}Checking what was installed:${NC}"
    ls -la /mnt/
    
    _print "${YELLOW}${WARNING} Manual troubleshooting required:${NC}"
    _print "${YELLOW}1. Check if /mnt/etc/nixos/configuration.nix, default.nix, or flake.nix exists${NC}"
    _print "${YELLOW}2. Try manual installation: sudo nixos-install --flake .#x86_64-linux-server --no-root-passwd --no-channel-copy${NC}"
    _print "${YELLOW}3. Check disk space and memory${NC}"
    
    # Drop into shell for manual troubleshooting
    exec /bin/bash
  fi
}

cleanup() {
  _print "${CYAN}${INFO} Cleaning up temporary files${NC}"
  
  # Final garbage collection and cleanup
  _print "${YELLOW}Final cleanup and garbage collection...${NC}"
  sudo nix-collect-garbage -d || true
  sudo rm -rf /tmp/* || true
  sudo rm -rf /var/tmp/* || true
  rm -rf nixos-config-main.zip nixos-config-main nixos-config
  
  _print "${GREEN}${SUCCESS} Cleanup complete!${NC}"
}

# Main execution
_print "${PURPLE}${ROCKET} NixOS Server Installation${NC}"
_print "${BLUE}Installing CLI-only NixOS server${NC}"

check_installer
get_user_input
confirm_configuration
download_config
setup_disk_with_desktop_method
setup_disk_manual
setup_disk_simple
run_disko
setup_files
install_nixos
install_result=$?
cleanup
prompt_reboot 