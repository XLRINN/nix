#!/usr/bin/env bash
set -eu

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
ROCKET="🚀"
SERVER="🖥️"
DISK="💾"
NETWORK="🌐"
USER="👤"
EMAIL="📧"
HOSTNAME="🏷️"
SUCCESS="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"

# Custom print function
_print() {
  echo -e "$1"
}

# Custom prompt function (commented out for testing)
# _prompt() {
#   local message="$1"
#   local variable="$2"
#   _print "$message"
#   read -r $variable
# }

check_installer() {
  if [ -e /etc/NIXOS ]; then
    _print "${GREEN}${SUCCESS} Running in the NixOS installer environment.${NC}"
  else
    _print "${RED}${ERROR} Not running in the NixOS installer environment.${NC}"
    exit 1
  fi
}

# Set defaults and get user input
get_user_input() {
  _print "${CYAN}${USER} Server Configuration${NC}"
  
  # Extract hostname from default.nix
  _print "${BLUE}Extracting hostname from configuration...${NC}"
  export HOST_NAME=$(grep -o 'hostName = "[^"]*"' hosts/server/default.nix | cut -d'"' -f2)
  if [ -z "$HOST_NAME" ]; then
    export HOST_NAME="loki"  # fallback
  fi
  _print "${GREEN}${SUCCESS} Hostname: $HOST_NAME${NC}"
  
  # Extract username from default.nix
  _print "${BLUE}Extracting username from configuration...${NC}"
  export USERNAME=$(grep -o 'user = "[^"]*"' hosts/server/default.nix | cut -d'"' -f2)
  if [ -z "$USERNAME" ]; then
    export USERNAME="david"  # fallback
  fi
  export GIT_NAME="$USERNAME"
  export GIT_EMAIL="xlrin.morgan@gmail.com"
  _print "${GREEN}${SUCCESS} Username: $USERNAME${NC}"
  
  # Use DHCP by default
  export NETWORK_CONFIG="dhcp"
  _print "${GREEN}${SUCCESS} Network: DHCP${NC}"
  
  # Automatically use sda as boot disk
  export BOOT_DISK="sda"
  _print "${GREEN}${SUCCESS} Boot disk: $BOOT_DISK${NC}"
  
  # Validate the disk exists
  if [ ! -b "/dev/$BOOT_DISK" ]; then
    _print "${RED}${ERROR} Disk /dev/$BOOT_DISK does not exist!${NC}"
    _print "${YELLOW}Available disks:${NC}"
    lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0
    exit 1
  fi
}

# Original user info function (commented out for testing)
# get_user_info() {
#   _print "${CYAN}${USER} User Setup${NC}"
#   _prompt "${YELLOW}Username (Enter for 'david'): ${NC}" USERNAME
#   
#   if [[ -z "$USERNAME" ]]; then
#     export USERNAME="david"
#   fi
#   
#   _print "${GREEN}${SUCCESS} Username set to: $USERNAME${NC}"
#   
#   export GIT_EMAIL="xlrin.morgan@gmail.com"
#   export GIT_NAME="$USERNAME"
#   _print "${GREEN}${SUCCESS} Name set to: $GIT_NAME${NC}"
# }

# Original hostname function (commented out for testing)
# get_hostname() {
#   _print "${CYAN}${HOSTNAME} Hostname${NC}"
#   _prompt "${YELLOW}Hostname: ${NC}" HOST_NAME
#   
#   while [[ -z "$HOST_NAME" ]]; do
#     _print "${RED}${ERROR} Hostname cannot be empty!${NC}"
#     _prompt "${YELLOW}Enter hostname for the server: ${NC}" HOST_NAME
#   done
#   
#   _print "${GREEN}${SUCCESS} Hostname set to: $HOST_NAME${NC}"
# }

# Original boot disk function (commented out for testing)
# get_boot_disk() {
#   _print "${CYAN}${DISK} Boot Disk${NC}"
#   
#   # Show available disks
#   _print "${BLUE}Available disks:${NC}"
#   disks=$(lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0)
#   echo "$disks"
#   
#   # Try to auto-detect the best disk
#   local auto_detected_disk=""
#   
#   # Check for common VM disk names first
#   for disk in vda sda nvme0n1; do
#     if [ -b "/dev/$disk" ]; then
#       auto_detected_disk="$disk"
#       break
#     fi
#   done
#   
#   # If no VM disk found, check for any available disk
#   if [ -z "$auto_detected_disk" ]; then
#     auto_detected_disk=$(lsblk -nd --output NAME | grep -v loop | grep -v sr0 | head -1)
#   fi
#   
#   if [ -n "$auto_detected_disk" ]; then
#     _print "${GREEN}Auto-detected disk: $auto_detected_disk${NC}"
#     _prompt "${YELLOW}Use auto-detected disk ($auto_detected_disk)? (Y/n): ${NC}" use_auto
#     case "$use_auto" in
#       [Nn] | [Nn][Oo] )
#         _prompt "${YELLOW}Enter boot disk name (e.g., vda, sda, nvme0n1): ${NC}" BOOT_DISK
#         ;;
#       *)
#         export BOOT_DISK="$auto_detected_disk"
#         _print "${GREEN}${SUCCESS} Using auto-detected disk: $BOOT_DISK${NC}"
#         ;;
#     esac
#   else
#     _print "${YELLOW}Could not auto-detect disk. Please select manually.${NC}"
#     _prompt "${YELLOW}Enter boot disk name (e.g., vda, sda, nvme0n1): ${NC}" BOOT_DISK
#   fi
#   
#   # Validate the selected disk exists
#   if [ ! -b "/dev/$BOOT_DISK" ]; then
#     _print "${RED}${ERROR} Selected disk /dev/$BOOT_DISK does not exist!${NC}"
#     _print "${YELLOW}Available disks:${NC}"
#     lsblk -nd --output NAME,SIZE,TYPE | grep -v loop | grep -v sr0
#     exit 1
#   fi
#   
#   _print "${GREEN}${SUCCESS} Using disk: $BOOT_DISK${NC}"
# }

# Original network config function (commented out for testing)
# get_network_config() {
#   _print "${CYAN}${NETWORK} Network${NC}"
#   _prompt "${YELLOW}Static IP (Enter for DHCP): ${NC}" STATIC_IP
#   
#   if [[ -z "$STATIC_IP" ]]; then
#     export NETWORK_CONFIG="dhcp"
#     _print "${GREEN}${SUCCESS} Using DHCP for automatic IP assignment${NC}"
#   else
#     export NETWORK_CONFIG="static"
#     _prompt "${YELLOW}Enter subnet mask (e.g., 255.255.255.0): ${NC}" SUBNET_MASK
#     export GATEWAY="192.168.69.1"
#     _print "${GREEN}${SUCCESS} Gateway set to: 192.168.69.1${NC}"
#   fi
# }

# Show configuration summary and confirm
confirm_configuration() {
  _print "${CYAN}${INFO} Configuration Summary${NC}"
  _print "${GREEN}Username: $USERNAME${NC}"
  _print "${GREEN}Email: $GIT_EMAIL${NC}"
  _print "${GREEN}Name: $GIT_NAME${NC}"
  _print "${GREEN}Hostname: $HOST_NAME${NC}"
  _print "${GREEN}Boot disk: $BOOT_DISK${NC}"
  _print "${GREEN}Network: $NETWORK_CONFIG${NC}"
  
  _print "${GREEN}${SUCCESS} Proceeding with installation...${NC}"
}

download_config() {
  _print "${CYAN}${SERVER} Downloading Configuration${NC}"
  curl -LJ0 https://github.com/xlrinn/nix/archive/server.zip -o nixos-config-main.zip
  unzip nixos-config-main.zip
  
  # Remove existing directory if it exists
  rm -rf nixos-config
  
  # Check what was extracted
  _print "${BLUE}Checking extracted contents...${NC}"
  ls -la
  
  # Look for the server directory
  if [ -d "nix-server" ]; then
    mv nix-server nixos-config
  else
    _print "${RED}${ERROR} Could not find nix-server directory in extracted contents${NC}"
    _print "${YELLOW}Available directories:${NC}"
    ls -d */
    exit 1
  fi
  
  cd nixos-config
  
  # Verify the directory structure
  _print "${BLUE}Verifying directory structure...${NC}"
  if [ ! -f "modules/server/disk-config.nix" ]; then
    _print "${RED}${ERROR} Server disk configuration not found!${NC}"
    _print "${YELLOW}Available files:${NC}"
    find . -name "*.nix" -type f | head -10
    exit 1
  fi
  
  _print "${GREEN}${SUCCESS} Configuration downloaded and verified!${NC}"
}

# Use the desktop's proven disk setup process
setup_disk_with_desktop_method() {
  _print "${CYAN}${DISK} Setting up disk using desktop method${NC}"
  
  # Set environment variables for the apply script
  export USERNAME="$USERNAME"
  export GIT_EMAIL="$GIT_EMAIL"
  export GIT_NAME="$GIT_NAME"
  export HOST_NAME="$HOST_NAME"
  export BOOT_DISK="$BOOT_DISK"
  export NETWORK_CONFIG="$NETWORK_CONFIG"
  
  # Use the desktop apply script for reliable disk setup
  _print "${BLUE}Running desktop apply script for disk configuration...${NC}"
  ./apps/x86_64-linux/apply --non-interactive
  
  # Verify the disk replacement worked
  if grep -q "%DISK%" modules/server/disk-config.nix; then
    _print "${RED}${ERROR} Disk replacement failed! %DISK% still found in disk-config.nix${NC}"
    _print "${YELLOW}Manual fix: sed -i 's/%DISK%/$BOOT_DISK/g' modules/server/disk-config.nix${NC}"
    exit 1
  fi
  
  _print "${GREEN}${SUCCESS} Disk configuration applied successfully!${NC}"
}



run_disko() {
  _print "${CYAN}${DISK} Setting up disk with Disko${NC}"
  
  # Use disko for disk setup
  _print "${YELLOW}Setting up disk with disko...${NC}"
  
  # Ensure we're in the correct directory and the file exists
  if [ ! -f "./modules/server/disk-config.nix" ]; then
    _print "${RED}${ERROR} Disk configuration file not found!${NC}"
    _print "${YELLOW}Current directory: $(pwd)${NC}"
    _print "${YELLOW}Looking for: ./modules/server/disk-config.nix${NC}"
    ls -la modules/server/ 2>/dev/null || _print "${YELLOW}modules/server/ directory not found${NC}"
    exit 1
  fi
  
  _print "${BLUE}${INFO} Using disk config: $(pwd)/modules/server/disk-config.nix${NC}"
  
  # Use the official Disko command pattern from documentation
  _print "${BLUE}${INFO} Running disko with official pattern...${NC}"
  
  # Run disko without confirmation for faster testing
  if sudo nix --experimental-features "nix-command flakes" run github:nix-community/disko/latest -- --mode zap_create_mount "./modules/server/disk-config.nix"; then
    _print "${GREEN}${SUCCESS} Disk setup complete!${NC}"
  else
    _print "${RED}${ERROR} Disko failed!${NC}"
    _print "${YELLOW}${WARNING} Check the error messages above${NC}"
    exit 1
  fi
}

setup_files() {
  _print "${CYAN}${SERVER} Setting up NixOS files${NC}"
  
  sudo mkdir -p /mnt/etc/nixos
  sudo cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
  _print "${GREEN}${SUCCESS} Files copied to /mnt/etc/nixos${NC}"
}



install_nixos() {
  _print "${CYAN}${ROCKET} Installing NixOS${NC}"
  
  ARCH=$(uname -m)

  case "$ARCH" in
    x86_64)
      FLAKE_TARGET="x86_64-linux-server"
      ;;
    aarch64)
      FLAKE_TARGET="aarch64-linux-server"
      ;;
    *)
      _print "${RED}${ERROR} Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  _print "${BLUE}Starting NixOS installation with target: $FLAKE_TARGET${NC}"
  
  # Check available disk space
  _print "${YELLOW}Checking available disk space...${NC}"
  df -h /
  
  # Aggressive cleanup for Hetzner installer environment
  _print "${YELLOW}Aggressive cleanup for Hetzner installer environment...${NC}"
  sudo nix-collect-garbage -d || true
  sudo rm -rf /tmp/* || true
  sudo rm -rf /var/tmp/* || true
  sudo systemctl restart nix-daemon || true
  sleep 10
  
  # Check space again
  _print "${YELLOW}Disk space after cleanup:${NC}"
  df -h /
  
  # Install NixOS
  _print "${BLUE}Installing NixOS...${NC}"
  if timeout 7200 sudo nixos-install --flake .#$FLAKE_TARGET --no-root-passwd --no-channel-copy --verbose; then
    _print "${GREEN}${SUCCESS} NixOS installation completed successfully${NC}"
    sudo chmod -R 775 /mnt/etc/nixos
    return 0
  else
    _print "${RED}${ERROR} Installation failed${NC}"
    _print "${YELLOW}Manual commands to try:${NC}"
    _print "${YELLOW}1. sudo nixos-install --flake .#$FLAKE_TARGET --no-root-passwd --no-channel-copy${NC}"
    _print "${YELLOW}2. Check memory: free -h${NC}"
    _print "${YELLOW}3. Check disk space: df -h${NC}"
    return 1
  fi
}

prompt_reboot() {
  _print "${CYAN}${INFO} Installation Complete!${NC}"
  _print "${YELLOW}${WARNING} Installation completed successfully!${NC}"
  
  # Drop into terminal for manual password setup
  _print "${BLUE}${INFO} Dropping into terminal for manual password setup...${NC}"
  _print "${YELLOW}You can now set passwords manually:${NC}"
  _print "${YELLOW}1. Set root password: sudo chroot /mnt passwd root${NC}"
  _print "${YELLOW}2. Set user password: sudo chroot /mnt passwd david${NC}"
  _print "${YELLOW}3. Exit terminal when done: exit${NC}"
  
  # Start a new shell for manual password setup
  exec /bin/bash
}

cleanup() {
  _print "${CYAN}${INFO} Cleaning up temporary files${NC}"
  
  # Final garbage collection and cleanup
  _print "${YELLOW}Final cleanup and garbage collection...${NC}"
  sudo nix-collect-garbage -d || true
  sudo rm -rf /tmp/* || true
  sudo rm -rf /var/tmp/* || true
  rm -rf nixos-config-main.zip nixos-config-main nixos-config
  
  _print "${GREEN}${SUCCESS} Cleanup complete!${NC}"
}

# Main execution
_print "${PURPLE}${ROCKET} NixOS Server Installation${NC}"
_print "${BLUE}Installing CLI-only NixOS server${NC}"

check_installer
get_user_input
confirm_configuration
download_config
setup_disk_with_desktop_method
run_disko
setup_files
install_nixos
install_result=$?
cleanup
prompt_reboot 