#!/usr/bin/env bash
set -eu

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

check_installer() {
  if [ -e /etc/NIXOS ]; then
    echo -e "\e[1;32mRunning in the NixOS installer environment.\e[0m"
  else
    echo -e "\e[1;31mNot running in the NixOS installer environment.\e[0m"
    exit 1
  fi
}

cleanup() {
  rm -rf nixos-config-main.zip nixos-config-main nix-* nyx-*
}

download_config() {
  NIX_REF=${NIX_REF:-server}
  curl -LJ0 "https://github.com/xlrinn/nix/archive/${NIX_REF}.zip" -o nixos-config-main.zip
  unzip -q nixos-config-main.zip
  SRC_DIR=$(find . -maxdepth 1 -type d -name "nix-*" | head -n1)
  if [ -z "$SRC_DIR" ] || [ ! -d "$SRC_DIR" ]; then
    echo -e "${RED}Error: Extracted directory not found after download.${NC}"
    exit 1
  fi
  cd "$SRC_DIR"
  echo -e "${GREEN}✓ Configuration downloaded and extracted${NC}"
}

run_apply() {
  export NONINTERACTIVE=${NONINTERACTIVE:-1}
  : "${HOST_NAME:=server}"
  : "${BOOT_DISK:=sda}"
  ./apps/x86_64-linux/apply
  export USERNAME="david"
  echo -e "${GREEN}✓ Apply phase complete${NC}"
}

run_disko() {
  nix --experimental-features "nix-command flakes" run github:nix-community/disko -- --mode disko ./modules/nixos/disk-config.nix
  echo -e "${GREEN}✓ Disk partitioned and mounted${NC}"
}

setup_files() {
  mkdir -p /mnt/etc/nixos
  cp -r * /mnt/etc/nixos
  cd /mnt/etc/nixos
  echo -e "${GREEN}✓ Files copied to system${NC}"

  mkdir -p /mnt/home/david
  if [ -d "/mnt/home/david/nix" ]; then
    rm -rf /mnt/home/david/nix
  fi
  git clone --origin nyx --depth 1 --branch master https://github.com/xlrinn/nix.git /mnt/home/david/nix
  if [ -f /tmp/git_name.txt ]; then git -C /mnt/home/david/nix config user.name "$(cat /tmp/git_name.txt)"; fi
  if [ -f /tmp/git_email.txt ]; then git -C /mnt/home/david/nix config user.email "$(cat /tmp/git_email.txt)"; fi
  git -C /mnt/home/david/nix remote set-url nyx git@github.com:xlrinn/nix.git >/dev/null 2>&1 || true
  git -C /mnt/home/david/nix config --add remote.nyx.fetch "+refs/heads/*:refs/remotes/nyx/*" || true
  git -C /mnt/home/david/nix remote set-branches nyx '*' || true
  git -C /mnt/home/david/nix fetch nyx --prune --tags || true
  git -C /mnt/home/david/nix fetch nyx --unshallow >/dev/null 2>&1 || true
  chown -R 1000:1000 /mnt/home/david/nix
  chmod -R 755 /mnt/home/david/nix

  if [ -f /tmp/git_name.txt ] && [ -f /tmp/git_email.txt ]; then
    cat > /mnt/home/david/.gitconfig <<'GITCFG'
[user]
    name = PLACEHOLDER_NAME
    email = PLACEHOLDER_EMAIL
[pull]
    rebase = false
GITCFG
    sed -i "s|PLACEHOLDER_NAME|$(cat /tmp/git_name.txt)|" /mnt/home/david/.gitconfig
    sed -i "s|PLACEHOLDER_EMAIL|$(cat /tmp/git_email.txt)|" /mnt/home/david/.gitconfig
    chown 1000:1000 /mnt/home/david/.gitconfig
    chmod 600 /mnt/home/david/.gitconfig
  fi
}

install_nixos() {
  ARCH=$(uname -m)
  case "$ARCH" in
    x86_64)
      FLAKE_TARGET="server-x86_64-linux"
      ;;
    aarch64)
      FLAKE_TARGET="server-aarch64-linux"
      ;;
    *)
      echo -e "${RED}Unsupported architecture: $ARCH${NC}"
      exit 1
      ;;
  esac

  nixos-install --flake .#$FLAKE_TARGET --option max-jobs 1 --no-write-lock-file --no-root-passwd
  chmod -R 775 /mnt/etc/nixos

  echo "root:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd
  echo "david:6!y2c87T" | chroot /mnt /nix/var/nix/profiles/system/sw/bin/chpasswd

  echo -e "${GREEN}✓ NixOS server profile installed${NC}"
}

run_unlock() {
  if [[ "${RUN_UNLOCK:-1}" != "1" ]]; then
    echo -e "${YELLOW}Skipping Bitwarden unlock (RUN_UNLOCK=${RUN_UNLOCK:-0}).${NC}"
    return
  fi

  echo -e "${CYAN}Launching 'unlock' helper inside the target system...${NC}"
  if ! chroot /mnt /nix/var/nix/profiles/system/sw/bin/su - david -c "cd ~/nix && bash scripts/secrets-wizard.sh"; then
    echo -e "${YELLOW}Bitwarden unlock helper exited with an error or was cancelled. Run 'unlock' after reboot if needed.${NC}"
  fi
}

prompt_reboot() {
  echo -e "\e[1;32mRebooting in 5 seconds...\e[0m"
  sleep 5
  reboot
}

cleanup
check_installer
download_config
run_apply
run_disko
setup_files
install_nixos
run_unlock
cleanup
prompt_reboot
