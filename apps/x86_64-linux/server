#!/usr/bin/env bash

# Server installation script for NixOS
# This script installs a minimal CLI-only NixOS server

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Error handling
ERROR="❌"
SUCCESS="✅"
INFO="ℹ️"

# Function to print colored output
_print() {
    echo -e "$1"
}

# Function to check if running as root
_check_root() {
    if [[ $EUID -eq 0 ]]; then
        _print "${RED}${ERROR} This script should not be run as root.${NC}"
        exit 1
    fi
}

# Function to check if we're on NixOS
_check_nixos() {
    if [[ -f /etc/os-release ]] && grep -q "NixOS" /etc/os-release; then
        _print "${YELLOW}${INFO} Running on NixOS live system.${NC}"
    else
        _print "${RED}${ERROR} This script should be run on a NixOS live system.${NC}"
        exit 1
    fi
}

# Function to detect boot disk
_detect_boot_disk() {
    _print "${BLUE}Detecting boot disk...${NC}"
    
    # Look for the largest disk that's not a CD/DVD
    BOOT_DISK=$(lsblk -d -n -o NAME,SIZE,TYPE | grep -E '^sd[a-z]' | sort -k2 -hr | head -1 | awk '{print $1}')
    
    if [[ -z "$BOOT_DISK" ]]; then
        _print "${RED}${ERROR} No suitable boot disk found.${NC}"
        exit 1
    fi
    
    _print "${GREEN}${SUCCESS} Detected boot disk: /dev/$BOOT_DISK${NC}"
}

# Function to setup configuration
_setup_config() {
    _print "${BLUE}Setting up NixOS configuration...${NC}"
    
    # Create /etc/nixos directory if it doesn't exist
    sudo mkdir -p /etc/nixos
    
    # Copy current configuration to /etc/nixos
    _print "${YELLOW}Copying configuration files...${NC}"
    sudo cp -r . /etc/nixos/
    
    # Verify configuration
    _print "${YELLOW}Verifying configuration structure...${NC}"
    if [[ -d "/etc/nixos/hosts" && -d "/etc/nixos/modules" ]]; then
        _print "${GREEN}${SUCCESS} Configuration setup completed!${NC}"
    else
        _print "${RED}${ERROR} Configuration structure is invalid.${NC}"
        exit 1
    fi
}

# Function to setup disk
_setup_disk() {
    _print "${BLUE}💾 Setting up disk using NixOS configuration${NC}"
    
    # Unmount any existing mounts
    sudo umount -R /mnt 2>/dev/null || true
    sudo mkdir -p /mnt
    
    # Use the disk configuration from /etc/nixos
    _print "${YELLOW}Using disk configuration from /etc/nixos/modules/server/disk-config.nix...${NC}"
    
    # Check if disk config exists in /etc/nixos
    if [[ ! -f "/etc/nixos/modules/server/disk-config.nix" ]]; then
        _print "${RED}${ERROR} Disk configuration file not found: /etc/nixos/modules/server/disk-config.nix${NC}"
        exit 1
    fi
    
    _print "${YELLOW}Disk configuration being used:${NC}"
    cat /etc/nixos/modules/server/disk-config.nix
    
    # Run disko with the config from /etc/nixos
    _print "${YELLOW}Running disko to partition and format the disk...${NC}"
    if nix --extra-experimental-features "nix-command flakes" run github:nix-community/disko -- --mode disko /etc/nixos/modules/server/disk-config.nix; then
        _print "${GREEN}${SUCCESS} Disk setup completed successfully!${NC}"
    else
        _print "${RED}${ERROR} Disk partitioning failed.${NC}"
        exit 1
    fi
}

# Function to setup NixOS files
_setup_nixos_files() {
    _print "${BLUE}🖥️ Setting up NixOS files${NC}"
    
    # Copy configuration to mounted system
    sudo cp -r /etc/nixos/* /mnt/etc/nixos/
    
    _print "${GREEN}${SUCCESS} Files copied to /mnt/etc/nixos${NC}"
}

# Function to install NixOS
_install_nixos() {
    _print "${BLUE}🚀 Installing NixOS${NC}"
    
    cd /mnt/etc/nixos
    
    # Set target
    TARGET="x86_64-linux-server"
    _print "${YELLOW}Starting NixOS installation with target: $TARGET${NC}"
    _print "${YELLOW}Target: $TARGET${NC}"
    _print "${YELLOW}Current directory: $(pwd)${NC}"
    
    # Show available flake targets
    _print "${YELLOW}Available flake targets:${NC}"
    nix flake show . || true
    
    # Run garbage collection before installation
    _print "${YELLOW}Running garbage collection before installation...${NC}"
    nix-collect-garbage -d || true
    
    # Start installation with full output capture
    _print "${YELLOW}Starting installation with full output capture...${NC}"
    
    # Set environment variables for experimental features
    export NIX_CONFIG="experimental-features = nix-command flakes"
    
    # Install NixOS
    if sudo -E nixos-install --flake .#$TARGET --no-root-passwd --no-channel-copy; then
        _print "${GREEN}${SUCCESS} NixOS installation completed successfully!${NC}"
    else
        _print "${RED}${ERROR} Installation failed${NC}"
        _print "${YELLOW}Installation log saved to /tmp/nixos-install.log${NC}"
        _print "${YELLOW}Last 20 lines of log:${NC}"
        tail -20 /tmp/nixos-install.log 2>/dev/null || true
        
        # Show what was installed
        _print "${YELLOW}Checking what was installed:${NC}"
        ls -la /mnt/
        
        _print "${YELLOW}Manual commands to try:${NC}"
        _print "1. sudo nixos-install --flake .#$TARGET --no-root-passwd --no-channel-copy"
        _print "2. Check memory: free -h"
        _print "3. Check disk space: df -h"
        _print "4. Check if target exists: nix flake show ."
        
        exit 1
    fi
}

# Function to verify installation
_verify_installation() {
    _print "${BLUE}🔍 Verifying installation...${NC}"
    
    # Check if essential directories exist
    if [[ -d "/mnt/boot" && -d "/mnt/etc" && -d "/mnt/nix" ]]; then
        _print "${GREEN}${SUCCESS} Installation verification passed!${NC}"
    else
        _print "${RED}${ERROR} Installation verification failed - essential directories missing${NC}"
        _print "${YELLOW}Checking what was installed:${NC}"
        ls -la /mnt/
        exit 1
    fi
}

# Function to cleanup
_cleanup() {
    _print "${BLUE}🧹 Cleaning up...${NC}"
    
    # Unmount filesystems
    sudo umount -R /mnt 2>/dev/null || true
    
    _print "${GREEN}${SUCCESS} Cleanup completed!${NC}"
}

# Main execution
main() {
    _print "${GREEN}🚀 Starting NixOS Server Installation${NC}"
    _print "${YELLOW}This will install a minimal CLI-only NixOS server${NC}"
    _print ""
    
    # Check prerequisites
    _check_root
    _check_nixos
    
    # Detect boot disk
    _detect_boot_disk
    
    # Execute installation steps
    _setup_config
    _setup_disk
    _setup_nixos_files
    _install_nixos
    _verify_installation
    _cleanup
    
    _print "${GREEN}${SUCCESS} NixOS Server Installation Complete!${NC}"
    _print "${YELLOW}You can now reboot your system.${NC}"
}

# Run main function
main "$@" 